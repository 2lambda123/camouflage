{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Camouflage Documentation Camouflage is a service virtualization tool inspired by namshi/mockserver . As the original description says, the mocking/service virtualization works on a file based structure where you simply organize your mocked HTTP responses in a bunch of mock files and it will serve them like they were coming from a real API; in this way you can write your frontends without caring too much whether your backend is really ready or not. Why did we create Camouflage if a similar tool already exists? Well, the original tool has not been maintained for some time now. But more importantly, Camouflage simply borrows the idea from the original and though it does use some of the same logic and functions, majority of the code has been written from scratch. The underlying codebase has been re-written using typescript. Since we are still in development phase, some features from the original tool might be missing. (Because we are yet to develop it, or simply because we haven't made up our mind yet if those features are going to be included or not.) Camouflage introduces handlebars, which allows you to generate dynamic (more real) responses. Using handlebars, you can generate random numbers, string, alphanumeric string, UUIDs and random dates. You can also extract information from request queries, path, body or headers and use them in your response. You can use handlebars to carry out request matching for you. For example, return one response if a query param exists, return another if it doesn't. And, we saved the best for last. Camouflage supports gRPC Mocking!!","title":"Camouflage Documentation"},{"location":"#camouflage-documentation","text":"Camouflage is a service virtualization tool inspired by namshi/mockserver . As the original description says, the mocking/service virtualization works on a file based structure where you simply organize your mocked HTTP responses in a bunch of mock files and it will serve them like they were coming from a real API; in this way you can write your frontends without caring too much whether your backend is really ready or not.","title":"Camouflage Documentation"},{"location":"#why-did-we-create-camouflage-if-a-similar-tool-already-exists","text":"Well, the original tool has not been maintained for some time now. But more importantly, Camouflage simply borrows the idea from the original and though it does use some of the same logic and functions, majority of the code has been written from scratch. The underlying codebase has been re-written using typescript. Since we are still in development phase, some features from the original tool might be missing. (Because we are yet to develop it, or simply because we haven't made up our mind yet if those features are going to be included or not.) Camouflage introduces handlebars, which allows you to generate dynamic (more real) responses. Using handlebars, you can generate random numbers, string, alphanumeric string, UUIDs and random dates. You can also extract information from request queries, path, body or headers and use them in your response. You can use handlebars to carry out request matching for you. For example, return one response if a query param exists, return another if it doesn't. And, we saved the best for last. Camouflage supports gRPC Mocking!!","title":"Why did we create Camouflage if a similar tool already exists?"},{"location":"folder-structure/","text":"Folder Structure The way you organize your directories inside the ${MOCKS_DIR}, determine how your endpoints will be available. Following examples will help you understand the folder structure you need to maintain. Basic GET Request to /hello-world Create a directory ${MOCKS_DIR}/hello-world Create a GET.mock file inside it with your required raw html response POST Request to /users Create a directory ${MOCKS_DIR}/users Create a POST.mock file inside it with your required raw html response GET Request to /users/:userId Create a directory ${MOCKS_DIR}/users/__ (double underscore) Create a GET.mock file inside it with your required raw html response Similarily you can create PUT.mock, DELETE.mock etc in your intended path. For wildcard, use directory name as __ (double underscore) Note Unlike original mockserver, request matching criteria, are taken care of inside the .mock files instead of naming the files in a certain way. We intend to keep the file names simple and in the format ${HTTP_METHOD}.mock Caution Protocols http, https and http2, share the same mocks directory and folder structure, however folder structure and mocks directory for gRPC mocks is different. Please refer to the section Mocking gRPC if you are planning to create gRPC mocks. What data to put in .mock files The data you want to put can be easily fetched using a curl command with -i -X flags in following manner. Example: curl -i -X GET https://jsonplaceholder.typicode.com/users/1 > GET.mock Running this command, gives you a GET.mock file with following content. Modify it according to your requirement and place it in the location ${MOCKS_DIR}/users/__, and you have successfully mocked jsonplaceholder API. HTTP/1.1 200 OK date: Sat, 17 Apr 2021 05:21:51 GMT content-type: application/json; charset=utf-8 content-length: 509 set-cookie: __cfduid=ddf6b687a745fea6ab343400b5dfe9f141618636911; expires=Mon, 17-May-21 05:21:51 GMT; path=/; domain=.typicode.com; HttpOnly; SameSite=Lax x-powered-by: Express x-ratelimit-limit: 1000 x-ratelimit-remaining: 998 x-ratelimit-reset: 1612952731 vary: Origin, Accept-Encoding access-control-allow-credentials: true cache-control: max-age=43200 pragma: no-cache expires: -1 x-content-type-options: nosniff etag: W/\"1fd-+2Y3G3w049iSZtw5t1mzSnunngE\" via: 1.1 vegur cf-cache-status: HIT age: 14578 accept-ranges: bytes cf-request-id: 097fe04d2c000019d97db7d000000001 expect-ct: max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\" report-to: {\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report?s=%2FkpNonG0wnuykR5xxlGXKBUxm5DN%2BI1PpQ0ytmiw931XaIVBNqZMJLEr0%2F3kDTrOhbX%2FCCPZtI4iuU3V%2F07wO5uwqov0d4c12%2Fcdpiz7TIFqzGkr7DwUrzt40CLH\"}],\"max_age\":604800,\"group\":\"cf-nel\"} nel: {\"max_age\":604800,\"report_to\":\"cf-nel\"} server: cloudflare cf-ray: 6413365b7e9919d9-SIN alt-svc: h3-27=\":443\"; ma=86400, h3-28=\":443\"; ma=86400, h3-29=\":443\"; ma=86400 { \"id\": 1, \"name\": \"Leanne Graham\", \"username\": \"Bret\", \"email\": \"Sincere@april.biz\", \"address\": { \"street\": \"Kulas Light\", \"suite\": \"Apt. 556\", \"city\": \"Gwenborough\", \"zipcode\": \"92998-3874\", \"geo\": { \"lat\": \"-37.3159\", \"lng\": \"81.1496\" } }, \"phone\": \"1-770-736-8031 x56442\", \"website\": \"hildegard.org\", \"company\": { \"name\": \"Romaguera-Crona\", \"catchPhrase\": \"Multi-layered client-server neural-net\", \"bs\": \"harness real-time e-markets\" } }","title":"Folder Structure"},{"location":"folder-structure/#folder-structure","text":"The way you organize your directories inside the ${MOCKS_DIR}, determine how your endpoints will be available. Following examples will help you understand the folder structure you need to maintain.","title":"Folder Structure"},{"location":"folder-structure/#basic-get-request-to-hello-world","text":"Create a directory ${MOCKS_DIR}/hello-world Create a GET.mock file inside it with your required raw html response","title":"Basic GET Request to /hello-world"},{"location":"folder-structure/#post-request-to-users","text":"Create a directory ${MOCKS_DIR}/users Create a POST.mock file inside it with your required raw html response","title":"POST Request to /users"},{"location":"folder-structure/#get-request-to-usersuserid","text":"Create a directory ${MOCKS_DIR}/users/__ (double underscore) Create a GET.mock file inside it with your required raw html response Similarily you can create PUT.mock, DELETE.mock etc in your intended path. For wildcard, use directory name as __ (double underscore) Note Unlike original mockserver, request matching criteria, are taken care of inside the .mock files instead of naming the files in a certain way. We intend to keep the file names simple and in the format ${HTTP_METHOD}.mock Caution Protocols http, https and http2, share the same mocks directory and folder structure, however folder structure and mocks directory for gRPC mocks is different. Please refer to the section Mocking gRPC if you are planning to create gRPC mocks.","title":"GET Request to /users/:userId"},{"location":"folder-structure/#what-data-to-put-in-mock-files","text":"The data you want to put can be easily fetched using a curl command with -i -X flags in following manner. Example: curl -i -X GET https://jsonplaceholder.typicode.com/users/1 > GET.mock Running this command, gives you a GET.mock file with following content. Modify it according to your requirement and place it in the location ${MOCKS_DIR}/users/__, and you have successfully mocked jsonplaceholder API. HTTP/1.1 200 OK date: Sat, 17 Apr 2021 05:21:51 GMT content-type: application/json; charset=utf-8 content-length: 509 set-cookie: __cfduid=ddf6b687a745fea6ab343400b5dfe9f141618636911; expires=Mon, 17-May-21 05:21:51 GMT; path=/; domain=.typicode.com; HttpOnly; SameSite=Lax x-powered-by: Express x-ratelimit-limit: 1000 x-ratelimit-remaining: 998 x-ratelimit-reset: 1612952731 vary: Origin, Accept-Encoding access-control-allow-credentials: true cache-control: max-age=43200 pragma: no-cache expires: -1 x-content-type-options: nosniff etag: W/\"1fd-+2Y3G3w049iSZtw5t1mzSnunngE\" via: 1.1 vegur cf-cache-status: HIT age: 14578 accept-ranges: bytes cf-request-id: 097fe04d2c000019d97db7d000000001 expect-ct: max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\" report-to: {\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report?s=%2FkpNonG0wnuykR5xxlGXKBUxm5DN%2BI1PpQ0ytmiw931XaIVBNqZMJLEr0%2F3kDTrOhbX%2FCCPZtI4iuU3V%2F07wO5uwqov0d4c12%2Fcdpiz7TIFqzGkr7DwUrzt40CLH\"}],\"max_age\":604800,\"group\":\"cf-nel\"} nel: {\"max_age\":604800,\"report_to\":\"cf-nel\"} server: cloudflare cf-ray: 6413365b7e9919d9-SIN alt-svc: h3-27=\":443\"; ma=86400, h3-28=\":443\"; ma=86400, h3-29=\":443\"; ma=86400 { \"id\": 1, \"name\": \"Leanne Graham\", \"username\": \"Bret\", \"email\": \"Sincere@april.biz\", \"address\": { \"street\": \"Kulas Light\", \"suite\": \"Apt. 556\", \"city\": \"Gwenborough\", \"zipcode\": \"92998-3874\", \"geo\": { \"lat\": \"-37.3159\", \"lng\": \"81.1496\" } }, \"phone\": \"1-770-736-8031 x56442\", \"website\": \"hildegard.org\", \"company\": { \"name\": \"Romaguera-Crona\", \"catchPhrase\": \"Multi-layered client-server neural-net\", \"bs\": \"harness real-time e-markets\" } }","title":"What data to put in .mock files"},{"location":"future-plans/","text":"Future plans Following items are on current todo list: Add a proxy server which could then be used to implement a recording option to create mocks. Proxy server can also be used to make calls to actual downstream application if required. Add TCP Virtualization. If you'd like to contribute, you could either pick up an item from current todos, or submit your suggestions here .","title":"Future plans"},{"location":"future-plans/#future-plans","text":"Following items are on current todo list: Add a proxy server which could then be used to implement a recording option to create mocks. Proxy server can also be used to make calls to actual downstream application if required. Add TCP Virtualization. If you'd like to contribute, you could either pick up an item from current todos, or submit your suggestions here .","title":"Future plans"},{"location":"getting-started/","text":"Getting Started Install Camouflage: npm install -g camouflage-server Run camouflage --version to validate the installation was successful. Start the Camouflage server by initializing it with a config.yml file: camouflage --config config.yml Configuration Options / Sample Config yml File loglevel: info cpus: 2 protocols: http: mocks_dir: \"./mocks\" port: 8080 https: enable: true port: 8443 cert: \"./certs/server.cert\" key: \"./certs/server.key\" http2: enable: true port: 8081 cert: \"./certs/server.cert\" key: \"./certs/server.key\" grpc: enable: false host: \"10.111.22.333\" port: 4312 mocks_dir: \"./grpc/mocks\" protos_dir: \"./grpc/protos\" Create your first mock Camouflage follows the same convention as mockserver to create mocks. For example, You start by creating a directory ${MOCKS_DIR}/hello-world Create a file GET.mock under ${MOCKS_DIR}/hello-world. Paste following content: HTTP/1.1 200 OK X-Custom-Header: Custom-Value Content-Type: application/json { \"greeting\": \"Hey! It works\" } Navigate to http://localhost:8080/hello-world Building from source If you'd like to get the latest version of Camouflage, you can build it from the source. Note Building from source might have it's own drawbacks, most important of all is that source is always in beta. There might be some bugs which are still being worked upon. You might want to proceed with that aspect in mind. Clone the repository: git clone https://github.com/fauxauldrich/camouflage.git Install dependencies: npm install Build the project: npm build At this point you can run Camouflage using: node bin/camouflage.js --config ./config.yml However if you'd like to install Camouflage globally, execute: npm pack Install by running command: npm install -g camouflage-server-${version}.tgz or npm install -g camouflage-server-${version}.zip","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Install Camouflage: npm install -g camouflage-server Run camouflage --version to validate the installation was successful. Start the Camouflage server by initializing it with a config.yml file: camouflage --config config.yml","title":"Getting Started"},{"location":"getting-started/#configuration-options-sample-config-yml-file","text":"loglevel: info cpus: 2 protocols: http: mocks_dir: \"./mocks\" port: 8080 https: enable: true port: 8443 cert: \"./certs/server.cert\" key: \"./certs/server.key\" http2: enable: true port: 8081 cert: \"./certs/server.cert\" key: \"./certs/server.key\" grpc: enable: false host: \"10.111.22.333\" port: 4312 mocks_dir: \"./grpc/mocks\" protos_dir: \"./grpc/protos\"","title":"Configuration Options / Sample Config yml File"},{"location":"getting-started/#create-your-first-mock","text":"Camouflage follows the same convention as mockserver to create mocks. For example, You start by creating a directory ${MOCKS_DIR}/hello-world Create a file GET.mock under ${MOCKS_DIR}/hello-world. Paste following content: HTTP/1.1 200 OK X-Custom-Header: Custom-Value Content-Type: application/json { \"greeting\": \"Hey! It works\" } Navigate to http://localhost:8080/hello-world","title":"Create your first mock"},{"location":"getting-started/#building-from-source","text":"If you'd like to get the latest version of Camouflage, you can build it from the source. Note Building from source might have it's own drawbacks, most important of all is that source is always in beta. There might be some bugs which are still being worked upon. You might want to proceed with that aspect in mind. Clone the repository: git clone https://github.com/fauxauldrich/camouflage.git Install dependencies: npm install Build the project: npm build At this point you can run Camouflage using: node bin/camouflage.js --config ./config.yml However if you'd like to install Camouflage globally, execute: npm pack Install by running command: npm install -g camouflage-server-${version}.tgz or npm install -g camouflage-server-${version}.zip","title":"Building from source"},{"location":"handlebars/","text":"Handlebars Handlebars help you add character to your response. Instead of sending a static response or writing some code to generate a dynamic response, you can now simply use handlebars and let Camouflage do the work for you. Custom Helpers randomValue Type: Custom Helper Usage: {{randomValue}} - Simply using randomValue will generate a 16 character alphanumeric string. ex: 9ZeBvHW5viiYuWRa . {{randomValue type='ALPHANUMERIC'}} - You can specify a type as well. Your choices are: 'ALPHANUMERIC', 'ALPHABETIC', 'NUMERIC' and 'UUID'. {{randomValue type='NUMERIC' length=10}} - Don't want a 16 character output? Use length to specify the length. {{randomValue type='ALPHABETIC' uppercase=true}} - Finally, specify uppercase as true to get a, well, uppercase string. now Type: Custom Helper Usage: {{now}} - Simply using now will give you date in format YYYY-MM-DD hh:mm:ss {{now format='MM/DD/YYYY'}} - Format not to your liking? Use any format you'd like as long as it is supported by momentjs. {{now format='epoch'}} - Time since epoch in milliseconds {{now format='unix'}} - Time since epoch in seconds {{now format='MM/DD/YYYY hh:mm:ss' offset='-10 days'}} - Use offset specify the delta for your desired date from current date. Units for specifying offset are Key Shorthand years y quarters q months M weeks w days d hours h minutes m seconds s milliseconds ms capture Type: Custom Helper Usage: {{capture from='query' key='firstName'}} - Pretty self-explanatory, but if say your endpoint looks like /hello-world?firstName=John&lastName=Wick. And your response is {\"message\": \"Hello Wick, John\"}, you can make the response dynamic by formatting your response as { \"message\": \"{{capture from='query' key='lastName'}}, {{capture from='query' key='firstName'}}\" } {{capture from='path' regex='\\/users\\/get\\/(.*)?'}} - For path, you'd need to specify a regex to capture a value. {{capture from='body' using='jsonpath' selector='$.lastName'}} - To capture values from request body, your options are either using='regex' or using='jsonpath'. Selector will change accordingly. num_between Type: Custom Helper Usage: {{num_between lower=500 upper=600}} : Generate a number between two values. Example: you can add this value in your response header with a key Response-Delay, to simulate a latency in your API. Not providing lower/upper value or providing values where lower > upper would set delay to 0, i.e. won't have any effect. Check Response Delays page for a detailed example Inbuilt Helpers Note A variety of helpers are made available by Handlebar.js itself and Camouflage team had nothing to do with those, and we don't take credit for it. Following example just showcases how the inbuilt helpers can be used with Camouflage, more details and examples can be found just about anywhere on the internet. As far as inbuilt helpers are concerned, you can use any of them as long as it makes sense to you. Raw HTML Request: POST /users HTTP/1.1 Content-Type: application/json { \"firstName\": \"Robert\", \"lastName\": \"Downey\", \"nicknames\": [ { \"nickname\": \"Bob\" }, { \"nickname\": \"Rob\" } ] } Expected Raw HTML Response: HTTP/1.1 201 OK X-Requested-By: user-service Content-Type: application/json { \"status\": 201, \"message\": \"User created with ID: f45a3d2d-8dfb-4fc6-a0b2-c94882cd5b91\", \"data\": [ { \"nickname\": \"Bob\" }, { \"nickname\": \"Rob\" } ] } To create this service in camouflage, create a directory users under your ${MOCKS_DIR}. i.e. ${MOCKS_DIR}/users Create a file POST.mock and add following content to the file HTTP/1.1 201 OK X-Requested-By: user-service Content-Type: application/json { \"status\": 201, \"message\": \"User created with ID: {{randomValue type='UUID'}}\", \"data\": [ {{#each request.body.nicknames}} {{#if @last}} { \"nickname\": \"{{this.nickname}}\" } {{else}} { \"nickname\": \"{{this.nickname}}\" }, {{/if}} {{/each}} ] } Explanation We replaced the static UUID f45a3d2d-8dfb-4fc6-a0b2-c94882cd5b91 with {{randomValue type='UUID'}} , so that this value updates on each request. We wrapped our JSONObject inside data array with an each helper which iterates over nicknames array from request body. Finally we put an if condition to check if we are at the last element of the array, we shouldn't append a comma at the end of our JSONObject, in order to get a valid JSON. If we are at any other element in the array, we'll add a comma to JSONObject. Available inbuilt helpers are if , unless , each , with , lookup and log . More details are available at Handlebars Documentation","title":"Handlebars"},{"location":"handlebars/#handlebars","text":"Handlebars help you add character to your response. Instead of sending a static response or writing some code to generate a dynamic response, you can now simply use handlebars and let Camouflage do the work for you.","title":"Handlebars"},{"location":"handlebars/#custom-helpers","text":"","title":"Custom Helpers"},{"location":"handlebars/#randomvalue","text":"Type: Custom Helper Usage: {{randomValue}} - Simply using randomValue will generate a 16 character alphanumeric string. ex: 9ZeBvHW5viiYuWRa . {{randomValue type='ALPHANUMERIC'}} - You can specify a type as well. Your choices are: 'ALPHANUMERIC', 'ALPHABETIC', 'NUMERIC' and 'UUID'. {{randomValue type='NUMERIC' length=10}} - Don't want a 16 character output? Use length to specify the length. {{randomValue type='ALPHABETIC' uppercase=true}} - Finally, specify uppercase as true to get a, well, uppercase string.","title":"randomValue"},{"location":"handlebars/#now","text":"Type: Custom Helper Usage: {{now}} - Simply using now will give you date in format YYYY-MM-DD hh:mm:ss {{now format='MM/DD/YYYY'}} - Format not to your liking? Use any format you'd like as long as it is supported by momentjs. {{now format='epoch'}} - Time since epoch in milliseconds {{now format='unix'}} - Time since epoch in seconds {{now format='MM/DD/YYYY hh:mm:ss' offset='-10 days'}} - Use offset specify the delta for your desired date from current date. Units for specifying offset are Key Shorthand years y quarters q months M weeks w days d hours h minutes m seconds s milliseconds ms","title":"now"},{"location":"handlebars/#capture","text":"Type: Custom Helper Usage: {{capture from='query' key='firstName'}} - Pretty self-explanatory, but if say your endpoint looks like /hello-world?firstName=John&lastName=Wick. And your response is {\"message\": \"Hello Wick, John\"}, you can make the response dynamic by formatting your response as { \"message\": \"{{capture from='query' key='lastName'}}, {{capture from='query' key='firstName'}}\" } {{capture from='path' regex='\\/users\\/get\\/(.*)?'}} - For path, you'd need to specify a regex to capture a value. {{capture from='body' using='jsonpath' selector='$.lastName'}} - To capture values from request body, your options are either using='regex' or using='jsonpath'. Selector will change accordingly.","title":"capture"},{"location":"handlebars/#num_between","text":"Type: Custom Helper Usage: {{num_between lower=500 upper=600}} : Generate a number between two values. Example: you can add this value in your response header with a key Response-Delay, to simulate a latency in your API. Not providing lower/upper value or providing values where lower > upper would set delay to 0, i.e. won't have any effect. Check Response Delays page for a detailed example","title":"num_between"},{"location":"handlebars/#inbuilt-helpers","text":"Note A variety of helpers are made available by Handlebar.js itself and Camouflage team had nothing to do with those, and we don't take credit for it. Following example just showcases how the inbuilt helpers can be used with Camouflage, more details and examples can be found just about anywhere on the internet. As far as inbuilt helpers are concerned, you can use any of them as long as it makes sense to you. Raw HTML Request: POST /users HTTP/1.1 Content-Type: application/json { \"firstName\": \"Robert\", \"lastName\": \"Downey\", \"nicknames\": [ { \"nickname\": \"Bob\" }, { \"nickname\": \"Rob\" } ] } Expected Raw HTML Response: HTTP/1.1 201 OK X-Requested-By: user-service Content-Type: application/json { \"status\": 201, \"message\": \"User created with ID: f45a3d2d-8dfb-4fc6-a0b2-c94882cd5b91\", \"data\": [ { \"nickname\": \"Bob\" }, { \"nickname\": \"Rob\" } ] } To create this service in camouflage, create a directory users under your ${MOCKS_DIR}. i.e. ${MOCKS_DIR}/users Create a file POST.mock and add following content to the file HTTP/1.1 201 OK X-Requested-By: user-service Content-Type: application/json { \"status\": 201, \"message\": \"User created with ID: {{randomValue type='UUID'}}\", \"data\": [ {{#each request.body.nicknames}} {{#if @last}} { \"nickname\": \"{{this.nickname}}\" } {{else}} { \"nickname\": \"{{this.nickname}}\" }, {{/if}} {{/each}} ] } Explanation We replaced the static UUID f45a3d2d-8dfb-4fc6-a0b2-c94882cd5b91 with {{randomValue type='UUID'}} , so that this value updates on each request. We wrapped our JSONObject inside data array with an each helper which iterates over nicknames array from request body. Finally we put an if condition to check if we are at the last element of the array, we shouldn't append a comma at the end of our JSONObject, in order to get a valid JSON. If we are at any other element in the array, we'll add a comma to JSONObject. Available inbuilt helpers are if , unless , each , with , lookup and log . More details are available at Handlebars Documentation","title":"Inbuilt Helpers"},{"location":"mocking-gRPC/","text":"Mocking gRPC Camouflage v1.0.3 introduces mocking gRPC services. Creation of mocks remains similar to HTTP mocks with some minor changes. For starters, gRPC mocks should not be placed in the same mocks directory as HTTP mocks, instead they should have their own mocks and protos directories. Secondly, the folder structure inside grpc mocks directory will follow the convention ./grpc/mocks/ package_name / service_name / method_name .mock Note We currently support unary services only. But streams will be introduced soon. Creating in a gRPC Mock To create a new grpc mock, you would need the .proto file for your gRPC service. ex. todo.proto Create two new directories ./grpc/mocks and ./grpc/protos (you can name them as you wish) Place your .proto file in ./grpc/protos directory. Now, all we need is a .mock file. But, creating folder structure for gRPC follows a slightly different approach compared to HTTP mocks, and could be little complicated if you are not aware of Protofile syntanx. In any case, you would need following steps. Start by looking for a package name in your .proto file. Next you'd need the service name, and finally the method you need to mock. Create a new folder in ./grpc/mocks directory with the package name. e.g. ./grpc/mocks/todoPackage Create another folder in ./grpc/mocks/todoPackage directory with the service name. e.g. ./grpc/mocks/todoPackage/TodoService Finally create a .mock file in the directory ./grpc/mocks/todoPackage/TodoService with the method name. e.g ./grpc/mocks/todoPackage/TodoService/createTodo.mock Place your expected response in the mock file and you are done. You can use the handlebars as usual in your response!! { \"id\": \"{{randomValue type='UUID'}}\", \"text\": \"{{randomValue type='ALPHABETIC' length='100'}}\" } Note Since Camouflage gRPC server needs to register the new services everytime you create new mock, you'd need to restart the Camouflage server. Good news is, you can do so easily by making a get request to /restart endpoint. Though the downtime is minimal (less than a second, we do not recommend restarting the server during a performance test.","title":"Mocking gRPC"},{"location":"mocking-gRPC/#mocking-grpc","text":"Camouflage v1.0.3 introduces mocking gRPC services. Creation of mocks remains similar to HTTP mocks with some minor changes. For starters, gRPC mocks should not be placed in the same mocks directory as HTTP mocks, instead they should have their own mocks and protos directories. Secondly, the folder structure inside grpc mocks directory will follow the convention ./grpc/mocks/ package_name / service_name / method_name .mock Note We currently support unary services only. But streams will be introduced soon.","title":"Mocking gRPC"},{"location":"mocking-gRPC/#creating-in-a-grpc-mock","text":"To create a new grpc mock, you would need the .proto file for your gRPC service. ex. todo.proto Create two new directories ./grpc/mocks and ./grpc/protos (you can name them as you wish) Place your .proto file in ./grpc/protos directory. Now, all we need is a .mock file. But, creating folder structure for gRPC follows a slightly different approach compared to HTTP mocks, and could be little complicated if you are not aware of Protofile syntanx. In any case, you would need following steps. Start by looking for a package name in your .proto file. Next you'd need the service name, and finally the method you need to mock. Create a new folder in ./grpc/mocks directory with the package name. e.g. ./grpc/mocks/todoPackage Create another folder in ./grpc/mocks/todoPackage directory with the service name. e.g. ./grpc/mocks/todoPackage/TodoService Finally create a .mock file in the directory ./grpc/mocks/todoPackage/TodoService with the method name. e.g ./grpc/mocks/todoPackage/TodoService/createTodo.mock Place your expected response in the mock file and you are done. You can use the handlebars as usual in your response!! { \"id\": \"{{randomValue type='UUID'}}\", \"text\": \"{{randomValue type='ALPHABETIC' length='100'}}\" } Note Since Camouflage gRPC server needs to register the new services everytime you create new mock, you'd need to restart the Camouflage server. Good news is, you can do so easily by making a get request to /restart endpoint. Though the downtime is minimal (less than a second, we do not recommend restarting the server during a performance test.","title":"Creating in a gRPC Mock"},{"location":"monitoring/","text":"Monitoring Camouflage provides you with a prometheus scraping endpoint available at /metrics which contains information about your host and your mocks. You can install a Prometheus DB and configure it to scrape from /metrics endpoint, and use that data to create charts for monitoring your application. This might not be very useful when you are testing your frontends, or running a functional test. However while running a performance test, this data can prove to be useful. You can optionally install Grafana for even better visualizations. Sample Prometheus yml global: scrape_interval: 15s evaluation_interval: 15s scrape_configs: - job_name: 'camouflage' static_configs: - targets: ['localhost:8080'] Note Update the target with your IP and port if running remotely or if you have specified a different port while starting Camouflage","title":"Monitoring"},{"location":"monitoring/#monitoring","text":"Camouflage provides you with a prometheus scraping endpoint available at /metrics which contains information about your host and your mocks. You can install a Prometheus DB and configure it to scrape from /metrics endpoint, and use that data to create charts for monitoring your application. This might not be very useful when you are testing your frontends, or running a functional test. However while running a performance test, this data can prove to be useful. You can optionally install Grafana for even better visualizations. Sample Prometheus yml global: scrape_interval: 15s evaluation_interval: 15s scrape_configs: - job_name: 'camouflage' static_configs: - targets: ['localhost:8080'] Note Update the target with your IP and port if running remotely or if you have specified a different port while starting Camouflage","title":"Monitoring"},{"location":"performance-mode/","text":"Performance Mode By default Camouflage starts on a single CPU, by creating one master and one worker process. This is sufficient for a functional test and a small scale perf test (for a test with 60000 RPM without any latency simulation, 95th percentile response time was around 30 - 40 milliseconds). However, if you are on a multi core machine and you'd like Camouflage to utilize more cores, you can do so by updating the cpus parameter in your config.yml as any number less than the available CPUs. e.g. 4 This will tell Camouflage to start 1 master and 4 workers utilizing 4 cores of your CPU. This leads to a better performance. For a HTTP test with 60000 RPM with latency simulation, 95th between 10 - 13 millseconds. Reports can be found on the Tests page. Camouflage uses NodeJS cluster module to achieve this, which means it also provides a high availability. If you have specfied 4 workers, Camouflage will always ensure that 4 workers are running. In any case if one or more of your workers crash, they will be replaced by a new worker.","title":"Performance Mode"},{"location":"performance-mode/#performance-mode","text":"By default Camouflage starts on a single CPU, by creating one master and one worker process. This is sufficient for a functional test and a small scale perf test (for a test with 60000 RPM without any latency simulation, 95th percentile response time was around 30 - 40 milliseconds). However, if you are on a multi core machine and you'd like Camouflage to utilize more cores, you can do so by updating the cpus parameter in your config.yml as any number less than the available CPUs. e.g. 4 This will tell Camouflage to start 1 master and 4 workers utilizing 4 cores of your CPU. This leads to a better performance. For a HTTP test with 60000 RPM with latency simulation, 95th between 10 - 13 millseconds. Reports can be found on the Tests page. Camouflage uses NodeJS cluster module to achieve this, which means it also provides a high availability. If you have specfied 4 workers, Camouflage will always ensure that 4 workers are running. In any case if one or more of your workers crash, they will be replaced by a new worker.","title":"Performance Mode"},{"location":"releases/","text":"Releases 1.1.0 - 04/22/2021 Add HTTP2 protocol Improve logging Add docker support 1.0.5 - 04/20/2021 Add docker support (Dockerfile, docker-compose.yml: Image needs to be built locally for now) Fix logging Fix prometheus dependency issues 1.0.4 - 04/20/2021 Replace dependency causing node-gyp error while installation Other code fixes to accomodate above change Update sample config.yml 1.0.3 - 04/18/2021 Introduce mocking of gRPC services For easier management of configuration options, remove command line parameters. Camouflage will now be initialized using a config.yml Introduce better logging Change delay handlebar to num_between , for more generic use Add new management endpoints: /restart and /ping 1.0.2 - 04/17/2021 Fix regex to recognize HTTP/1.0, HTTP/1.1 and HTTP/2. HTTP/2 Camouflage server is not implemented yet but will be in future. Use os.EOL to split the contents of .mock file into arrays instead of \\n. This helps with cross platform compatibility. Add scrapping endpoint for prometheus: /metrics Add Camouflage endpoints for mocks management from a possible future UI GET /mocks - List available mocks DELETE /mocks - Delete selected mock Start a new worker if for some reason any of the workers goes down. This will ensure high availability so that at any time, a fixed number of workers will always be available as specified by -n X command line parameter Add a local copy of documentation at root (http://localhost:8080/) Camouflage can now be started by simply running camouflage command from the mocks dir. ( -m flag is now optional in case user wants to explicitly provide the path instead of navigating to mocks_dir. )","title":"Releases"},{"location":"releases/#releases","text":"","title":"Releases"},{"location":"releases/#110-04222021","text":"Add HTTP2 protocol Improve logging Add docker support","title":"1.1.0 - 04/22/2021"},{"location":"releases/#105-04202021","text":"Add docker support (Dockerfile, docker-compose.yml: Image needs to be built locally for now) Fix logging Fix prometheus dependency issues","title":"1.0.5 - 04/20/2021"},{"location":"releases/#104-04202021","text":"Replace dependency causing node-gyp error while installation Other code fixes to accomodate above change Update sample config.yml","title":"1.0.4 - 04/20/2021"},{"location":"releases/#103-04182021","text":"Introduce mocking of gRPC services For easier management of configuration options, remove command line parameters. Camouflage will now be initialized using a config.yml Introduce better logging Change delay handlebar to num_between , for more generic use Add new management endpoints: /restart and /ping","title":"1.0.3 - 04/18/2021"},{"location":"releases/#102-04172021","text":"Fix regex to recognize HTTP/1.0, HTTP/1.1 and HTTP/2. HTTP/2 Camouflage server is not implemented yet but will be in future. Use os.EOL to split the contents of .mock file into arrays instead of \\n. This helps with cross platform compatibility. Add scrapping endpoint for prometheus: /metrics Add Camouflage endpoints for mocks management from a possible future UI GET /mocks - List available mocks DELETE /mocks - Delete selected mock Start a new worker if for some reason any of the workers goes down. This will ensure high availability so that at any time, a fixed number of workers will always be available as specified by -n X command line parameter Add a local copy of documentation at root (http://localhost:8080/) Camouflage can now be started by simply running camouflage command from the mocks dir. ( -m flag is now optional in case user wants to explicitly provide the path instead of navigating to mocks_dir. )","title":"1.0.2 - 04/17/2021"},{"location":"request-matching/","text":"Request Matching There are scenarios when you would need to change your response based on some conditions met by fields on request objects. For example, if the end user passes an Authorization header, you'd want to send a 200 OK response if not you'd want to send a 401 Unauthorized resposne. To do so you can utilize the power of handlebars again. Simply provide an if else condition and you are good to go. Consider following example. You expect the user to call the endpoint /hello-world in two ways. 1) By simple making a GET request to /hello-world.; Or 2) By adding a query parameter name in the GET request to /hello-world. i.e. /hello-world?name=John Based on how the user calls the API, you'd want to send a different response. This can be done in following manner: Create GET.mock file under the directory ${MOCKS_DIR}/hello-world. And paste following content: {{#if request.query.name}} HTTP/1.1 200 OK X-Requested-By: Shubhendu Madhukar Content-Type: application/json { \"greeting\": \"Hello {{capture from='query' key='name'}}\", \"phone\": {{randomValue length=10 type='NUMERIC'}}, \"dateOfBirth\": \"{{now format='MM/DD/YYYY'}}\", \"test\": \"{{randomValue}}\" } {{else}} HTTP/1.1 200 OK X-Requested-By: Shubhendu Madhukar Content-Type: application/json { \"greeting\": \"Hello World\", \"phone\": {{randomValue length=10 type='NUMERIC'}}, \"dateOfBirth\": \"{{now format='MM/DD/YYYY'}}\", \"test\": \"{{randomValue}}\" } {{/if}} Explanation We are going to check if a query parameter with the key 'name' exists in the incoming request. We do so by adding an if condition {{#if request.query.name}} You can also check if that parameter equals a certain value {{#if request.query.name='John'}} Rest of the code is self explanatory, where if the condition is true, i.e. incoming request has a query parameter with key name , the greeting field in our response object would be Hello John , else the greeting would be Hello World . Thus if the end user makes a GET request as /hello-world?name=John , he'd get a greeting Hello John . However, if the user calls /hello-world without any name , he'd get a greeting as Hello World","title":"Request matching"},{"location":"request-matching/#request-matching","text":"There are scenarios when you would need to change your response based on some conditions met by fields on request objects. For example, if the end user passes an Authorization header, you'd want to send a 200 OK response if not you'd want to send a 401 Unauthorized resposne. To do so you can utilize the power of handlebars again. Simply provide an if else condition and you are good to go. Consider following example. You expect the user to call the endpoint /hello-world in two ways. 1) By simple making a GET request to /hello-world.; Or 2) By adding a query parameter name in the GET request to /hello-world. i.e. /hello-world?name=John Based on how the user calls the API, you'd want to send a different response. This can be done in following manner: Create GET.mock file under the directory ${MOCKS_DIR}/hello-world. And paste following content: {{#if request.query.name}} HTTP/1.1 200 OK X-Requested-By: Shubhendu Madhukar Content-Type: application/json { \"greeting\": \"Hello {{capture from='query' key='name'}}\", \"phone\": {{randomValue length=10 type='NUMERIC'}}, \"dateOfBirth\": \"{{now format='MM/DD/YYYY'}}\", \"test\": \"{{randomValue}}\" } {{else}} HTTP/1.1 200 OK X-Requested-By: Shubhendu Madhukar Content-Type: application/json { \"greeting\": \"Hello World\", \"phone\": {{randomValue length=10 type='NUMERIC'}}, \"dateOfBirth\": \"{{now format='MM/DD/YYYY'}}\", \"test\": \"{{randomValue}}\" } {{/if}}","title":"Request Matching"},{"location":"request-matching/#explanation","text":"We are going to check if a query parameter with the key 'name' exists in the incoming request. We do so by adding an if condition {{#if request.query.name}} You can also check if that parameter equals a certain value {{#if request.query.name='John'}} Rest of the code is self explanatory, where if the condition is true, i.e. incoming request has a query parameter with key name , the greeting field in our response object would be Hello John , else the greeting would be Hello World . Thus if the end user makes a GET request as /hello-world?name=John , he'd get a greeting Hello John . However, if the user calls /hello-world without any name , he'd get a greeting as Hello World","title":"Explanation"},{"location":"request-model/","text":"Request model Request object made available by camouflage is simply an instance of express request object for a given incoming request. Following are the properties/objects available on the request object which can be used in request matching or to extract information out of the request. request.baseUrl request.body request.cookies request.method request.originalUrl request.path request.protocol request.query request.headers request.body Refer to Express Documentation for more information on each of these properties.","title":"Request model"},{"location":"request-model/#request-model","text":"Request object made available by camouflage is simply an instance of express request object for a given incoming request. Following are the properties/objects available on the request object which can be used in request matching or to extract information out of the request. request.baseUrl request.body request.cookies request.method request.originalUrl request.path request.protocol request.query request.headers request.body Refer to Express Documentation for more information on each of these properties.","title":"Request model"},{"location":"response-delays/","text":"Response Delay Response delays are handled in a similar manner as it was done in mockserver, i.e. you add a Response-Delay header in raw response placed in your .mock file. For example, if you'd like to simulate a delay of 2 seconds for /hello-world endpoint, contents of your .mock file would be as follows: HTTP/1.1 200 OK X-Requested-By: Shubhendu Madhukar Content-Type: application/json Response-Delay: 2000 { \"greeting\": \"Hello World\", \"phone\": {{randomValue length=10 type='NUMERIC'}}, \"dateOfBirth\": \"{{now format='MM/DD/YYYY'}}\", \"test\": \"{{randomValue}}\" } Additionally you can also simulate a dynamic delay using the {{num_between}} handlebar as follows Response-Delay: {{num_between lower=500 upper=600}} This would add a random delay of a value between 500 to 600 milliseconds","title":"Response delays"},{"location":"response-delays/#response-delay","text":"Response delays are handled in a similar manner as it was done in mockserver, i.e. you add a Response-Delay header in raw response placed in your .mock file. For example, if you'd like to simulate a delay of 2 seconds for /hello-world endpoint, contents of your .mock file would be as follows: HTTP/1.1 200 OK X-Requested-By: Shubhendu Madhukar Content-Type: application/json Response-Delay: 2000 { \"greeting\": \"Hello World\", \"phone\": {{randomValue length=10 type='NUMERIC'}}, \"dateOfBirth\": \"{{now format='MM/DD/YYYY'}}\", \"test\": \"{{randomValue}}\" } Additionally you can also simulate a dynamic delay using the {{num_between}} handlebar as follows Response-Delay: {{num_between lower=500 upper=600}} This would add a random delay of a value between 500 to 600 milliseconds","title":"Response Delay"},{"location":"tests/","text":"Tests Functional Tests Following functional tests include the results for 7 example APIs available with Camouflage Performance Tests Single CPU This performance test was run on a single node process running without any flags on a single CPU. Test configuration: Test tool used was Locust. Locust was run in a distributed manner with 1 master and 4 workers on a 12 core machine. Please note that performance could be further improved by tuning the node js process or running Camouflage in performance mode. Performance mode: 4 CPU This performance test was on 4 node worker processes without any flags on 4 CPUs Test tool used was Locust. Locust was run in a distributed manner with 1 master and 4 workers on a 12 core machine.","title":"Tests"},{"location":"tests/#tests","text":"","title":"Tests"},{"location":"tests/#functional-tests","text":"Following functional tests include the results for 7 example APIs available with Camouflage","title":"Functional Tests"},{"location":"tests/#performance-tests","text":"","title":"Performance Tests"},{"location":"tests/#single-cpu","text":"This performance test was run on a single node process running without any flags on a single CPU. Test configuration: Test tool used was Locust. Locust was run in a distributed manner with 1 master and 4 workers on a 12 core machine. Please note that performance could be further improved by tuning the node js process or running Camouflage in performance mode.","title":"Single CPU"},{"location":"tests/#performance-mode-4-cpu","text":"This performance test was on 4 node worker processes without any flags on 4 CPUs Test tool used was Locust. Locust was run in a distributed manner with 1 master and 4 workers on a 12 core machine.","title":"Performance mode: 4 CPU"}]}
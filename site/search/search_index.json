{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Camouflage Documentation Camouflage is a service virtualization tool inspired by namshi/mockserver . As the original description says, the mocking/service virtualization works on a file based structure where you simply organize your mocked HTTP responses in a bunch of mock files and it will serve them like they were coming from a real API; in this way you can write your frontends without caring too much whether your backend is really ready or not. Why did we create Camouflage if a similar tool already exists? Well, the original tool has not been maintained for some time now. But more importantly, Camoufalge simply borrows the idea from the original and though it does use some of the same logic and functions, majority of the code has been written from scratch. The underlying codebase has been re-written using typescript. Since we are still in development phase, some features from the original tool might be missing. (Because we are yet to develop it, or simply because we haven't made up our mind yet if those features are going to be included or not.) Camouflage introduces handlebars, which allows you to generate dynamic (more real) responses. Using handlebars, you can generate random numbers, string, alphanumeric string, UUIDs and random dates. You can also extract information from request queries, path, body or headers and use them in your response.","title":"Camouflage Documentation"},{"location":"#camouflage-documentation","text":"Camouflage is a service virtualization tool inspired by namshi/mockserver . As the original description says, the mocking/service virtualization works on a file based structure where you simply organize your mocked HTTP responses in a bunch of mock files and it will serve them like they were coming from a real API; in this way you can write your frontends without caring too much whether your backend is really ready or not.","title":"Camouflage Documentation"},{"location":"#why-did-we-create-camouflage-if-a-similar-tool-already-exists","text":"Well, the original tool has not been maintained for some time now. But more importantly, Camoufalge simply borrows the idea from the original and though it does use some of the same logic and functions, majority of the code has been written from scratch. The underlying codebase has been re-written using typescript. Since we are still in development phase, some features from the original tool might be missing. (Because we are yet to develop it, or simply because we haven't made up our mind yet if those features are going to be included or not.) Camouflage introduces handlebars, which allows you to generate dynamic (more real) responses. Using handlebars, you can generate random numbers, string, alphanumeric string, UUIDs and random dates. You can also extract information from request queries, path, body or headers and use them in your response.","title":"Why did we create Camouflage if a similar tool already exists?"},{"location":"getting-started/","text":"Getting Started Install Camouflage: npm install -g camouflage-server Start server: camouflage -m ./mocks Create your first mock Camouflage follows the same convention as mockserver, to create mocks. For example, You start by creating a directory ${MOCKS_DIR}/hello-world Create a file GET.mock under ${MOCKS_DIR}/hello-world. Paste following content: HTTP/1.1 200 OK X-Custom-Header: Custom-Value Content-Type: application/json { \"greeting\": \"Hey! It works\" } Navigate to http://localhost:8080/hello-world","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Install Camouflage: npm install -g camouflage-server Start server: camouflage -m ./mocks","title":"Getting Started"},{"location":"getting-started/#create-your-first-mock","text":"Camouflage follows the same convention as mockserver, to create mocks. For example, You start by creating a directory ${MOCKS_DIR}/hello-world Create a file GET.mock under ${MOCKS_DIR}/hello-world. Paste following content: HTTP/1.1 200 OK X-Custom-Header: Custom-Value Content-Type: application/json { \"greeting\": \"Hey! It works\" } Navigate to http://localhost:8080/hello-world","title":"Create your first mock"},{"location":"more/folder-structure/","text":"Folder Structure The way you organize your directories inside the ${MOCKS_DIR}, determine how your endpoints will be available. Following examples will help you understand the folder structure you need to maintain. Basic GET Request to /hello-world Create a directory ${MOCKS_DIR}/hello-world Create a GET.mock file inside it with your required raw html response POST Request to /users Create a directory ${MOCKS_DIR}/users Create a POST.mock file inside it with your required raw html response GET Request to /users/:userId Create a directory ${MOCKS_DIR}/users/__ (double underscore) Create a GET.mock file inside it with your required raw html response Similarily you can create PUT.mock, DELETE.mock etc in your intended path. For wildcard, use directory name as __ (double underscore) Note Unlike original mockserver, request matching criteria, are taken care of, inside the .mock files instead of naming the files in a certain way. We intend to keep the file names simple and in the format ${HTTP_METHOD}.mock","title":"Folder Structure"},{"location":"more/folder-structure/#folder-structure","text":"The way you organize your directories inside the ${MOCKS_DIR}, determine how your endpoints will be available. Following examples will help you understand the folder structure you need to maintain.","title":"Folder Structure"},{"location":"more/folder-structure/#basic-get-request-to-hello-world","text":"Create a directory ${MOCKS_DIR}/hello-world Create a GET.mock file inside it with your required raw html response","title":"Basic GET Request to /hello-world"},{"location":"more/folder-structure/#post-request-to-users","text":"Create a directory ${MOCKS_DIR}/users Create a POST.mock file inside it with your required raw html response","title":"POST Request to /users"},{"location":"more/folder-structure/#get-request-to-usersuserid","text":"Create a directory ${MOCKS_DIR}/users/__ (double underscore) Create a GET.mock file inside it with your required raw html response Similarily you can create PUT.mock, DELETE.mock etc in your intended path. For wildcard, use directory name as __ (double underscore) Note Unlike original mockserver, request matching criteria, are taken care of, inside the .mock files instead of naming the files in a certain way. We intend to keep the file names simple and in the format ${HTTP_METHOD}.mock","title":"GET Request to /users/:userId"},{"location":"more/handlebars/","text":"Handlebars Handlebars help you add character to your response. Instead of sending a static response or writing some code to generate a dynamic response, you can now simply use handlebars and let Camouflage do the work for you. Custom Helpers randomValue Type: Custom Helper Usage: {{randomValue}} - Simply using randomValue will generate a 16 character alphanumeric string. ex: 9ZeBvHW5viiYuWRa . Why? We'll let you know when we figure that out. {{randomValue type='ALPHANUMERIC'}} - You can specify a type as well. Your choices are: 'ALPHANUMERIC', 'ALPHABETIC', 'NUMERIC' and 'UUID'. So, what will it be? {{randomValue type='NUMERIC' length=10}} - Don't want a 16 character output? Use length to specify the length. Simple enough. {{randomValue type='ALPHABETIC' uppercase=true}} - Finally, specify uppercase as true to get a, well, uppercase string. now Type: Custom Helper Usage: {{now}} - Simply using now will give you date in format YYYY-MM-DD hh:mm:ss {{now format='MM/DD/YYYY'}} - Format not to your liking? Use any format you'd like as long as it is supported by momentjs. We gave away the secret, didn't we? Don't ask us if you should use MM/DD/YYYY or DD/MM/YYYY. We like to stay away from the controversies. {{now format='epoch'}} - Time since epoch in milliseconds {{now format='unix'}} - Time since epoch in seconds capture Type: Custom Helper Usage: {{capture from='query' key='firstName'}} - Pretty self-explanatory, but if say your endpoint looks like /hello-world?firstName=John&lastName=Wick. And your response is {\"message\": \"Hello Wick, John\"}, you can make the response dynamic by formatting your response as { \"message\": \"{{capture from='query' key='lastName'}}, {{capture from='query' key='firstName'}}\" } {{capture from='path' regex='\\/users\\/get\\/(.*)?'}} - For path you'd need to specify a regex to capture a value. {{capture from='body' using='jsonpath' selector='$.lastName'}} - To capture values from request body, your options are either using='regex' or using='jsonpath'. Selector will change accordingly. Inbuilt Helpers Note A variety of helpers are made available by Handlebar.js itself and Camouflage team had nothing to do with those, and we don't take credit for it. Following example just showcases how the inbuilt helpers can be used with Camouflage, more details and examples can be found just about anywhere on the internet. As far as inbuilt helpers are concerned, you can use any of them as long as it makes sense to you. Raw HTML Request: POST /hello-world HTTP/1.1 Content-Type: application/json { \"firstName\": \"Robert\", \"lastName\": \"Downey\", \"nicknames\": [ { \"nickname\": \"Bob\" }, { \"nickname\": \"Rob\" } ] } Expected Raw HTML Response: HTTP/1.1 201 OK X-Requested-By: user-service Content-Type: application/json { \"status\": 201, \"message\": \"User created with ID: f45a3d2d-8dfb-4fc6-a0b2-c94882cd5b91\", \"data\": [ { \"nickname\": \"Bob\" }, { \"nickname\": \"Rob\" } ] } To create this service in camouflage, create a directory users under your ${MOCKS_DIR}. i.e. ${MOCKS_DIR}/users Create a file POST.mock and add following content to the file HTTP/1.1 201 OK X-Requested-By: user-service Content-Type: application/json { \"status\": 201, \"message\": \"User created with ID: {{randomValue type='UUID'}}\", \"data\": [ {{#each request.body.nicknames}} {{#if @last}} { \"nickname\": \"{{this.nickname}}\" } {{else}} { \"nickname\": \"{{this.nickname}}\" }, {{/if}} {{/each}} ] } Explanation We replaced the static UUID f45a3d2d-8dfb-4fc6-a0b2-c94882cd5b91 with {{randomValue type='UUID'}} , so that this value updates on each request. We wrapped our JSONObject inside data array with an each helper which iterates over nicknames array from request body. Finally we put an if condition to check if we are at the last element of the array, we shouldn't append a comma at the end of our JSONObject, in order to get a valid JSON. If we are at any other element in the array, we'll add a comma to JSONObject. Available inbuilt helpers are if , unless , each , with , lookup and log . More details are available at Handlebars Documentation","title":"Handlebars"},{"location":"more/handlebars/#handlebars","text":"Handlebars help you add character to your response. Instead of sending a static response or writing some code to generate a dynamic response, you can now simply use handlebars and let Camouflage do the work for you.","title":"Handlebars"},{"location":"more/handlebars/#custom-helpers","text":"","title":"Custom Helpers"},{"location":"more/handlebars/#randomvalue","text":"Type: Custom Helper Usage: {{randomValue}} - Simply using randomValue will generate a 16 character alphanumeric string. ex: 9ZeBvHW5viiYuWRa . Why? We'll let you know when we figure that out. {{randomValue type='ALPHANUMERIC'}} - You can specify a type as well. Your choices are: 'ALPHANUMERIC', 'ALPHABETIC', 'NUMERIC' and 'UUID'. So, what will it be? {{randomValue type='NUMERIC' length=10}} - Don't want a 16 character output? Use length to specify the length. Simple enough. {{randomValue type='ALPHABETIC' uppercase=true}} - Finally, specify uppercase as true to get a, well, uppercase string.","title":"randomValue"},{"location":"more/handlebars/#now","text":"Type: Custom Helper Usage: {{now}} - Simply using now will give you date in format YYYY-MM-DD hh:mm:ss {{now format='MM/DD/YYYY'}} - Format not to your liking? Use any format you'd like as long as it is supported by momentjs. We gave away the secret, didn't we? Don't ask us if you should use MM/DD/YYYY or DD/MM/YYYY. We like to stay away from the controversies. {{now format='epoch'}} - Time since epoch in milliseconds {{now format='unix'}} - Time since epoch in seconds","title":"now"},{"location":"more/handlebars/#capture","text":"Type: Custom Helper Usage: {{capture from='query' key='firstName'}} - Pretty self-explanatory, but if say your endpoint looks like /hello-world?firstName=John&lastName=Wick. And your response is {\"message\": \"Hello Wick, John\"}, you can make the response dynamic by formatting your response as { \"message\": \"{{capture from='query' key='lastName'}}, {{capture from='query' key='firstName'}}\" } {{capture from='path' regex='\\/users\\/get\\/(.*)?'}} - For path you'd need to specify a regex to capture a value. {{capture from='body' using='jsonpath' selector='$.lastName'}} - To capture values from request body, your options are either using='regex' or using='jsonpath'. Selector will change accordingly.","title":"capture"},{"location":"more/handlebars/#inbuilt-helpers","text":"Note A variety of helpers are made available by Handlebar.js itself and Camouflage team had nothing to do with those, and we don't take credit for it. Following example just showcases how the inbuilt helpers can be used with Camouflage, more details and examples can be found just about anywhere on the internet. As far as inbuilt helpers are concerned, you can use any of them as long as it makes sense to you. Raw HTML Request: POST /hello-world HTTP/1.1 Content-Type: application/json { \"firstName\": \"Robert\", \"lastName\": \"Downey\", \"nicknames\": [ { \"nickname\": \"Bob\" }, { \"nickname\": \"Rob\" } ] } Expected Raw HTML Response: HTTP/1.1 201 OK X-Requested-By: user-service Content-Type: application/json { \"status\": 201, \"message\": \"User created with ID: f45a3d2d-8dfb-4fc6-a0b2-c94882cd5b91\", \"data\": [ { \"nickname\": \"Bob\" }, { \"nickname\": \"Rob\" } ] } To create this service in camouflage, create a directory users under your ${MOCKS_DIR}. i.e. ${MOCKS_DIR}/users Create a file POST.mock and add following content to the file HTTP/1.1 201 OK X-Requested-By: user-service Content-Type: application/json { \"status\": 201, \"message\": \"User created with ID: {{randomValue type='UUID'}}\", \"data\": [ {{#each request.body.nicknames}} {{#if @last}} { \"nickname\": \"{{this.nickname}}\" } {{else}} { \"nickname\": \"{{this.nickname}}\" }, {{/if}} {{/each}} ] } Explanation We replaced the static UUID f45a3d2d-8dfb-4fc6-a0b2-c94882cd5b91 with {{randomValue type='UUID'}} , so that this value updates on each request. We wrapped our JSONObject inside data array with an each helper which iterates over nicknames array from request body. Finally we put an if condition to check if we are at the last element of the array, we shouldn't append a comma at the end of our JSONObject, in order to get a valid JSON. If we are at any other element in the array, we'll add a comma to JSONObject. Available inbuilt helpers are if , unless , each , with , lookup and log . More details are available at Handlebars Documentation","title":"Inbuilt Helpers"}]}
{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Camouflage Documentation Camouflage is a service virtualization tool inspired by namshi/mockserver . As the original description says, the mocking/service virtualization works on a file based structure where you simply organize your mocked HTTP responses in a bunch of mock files and it will serve them like they were coming from a real API; in this way you can write your frontends without caring too much whether your backend is really ready or not. Why did we create Camouflage if a similar tool already exists? Well, the original tool has not been maintained for some time now. But more importantly, Camouflage simply borrows the idea from the original and though it does use some of the same logic and functions, majority of the code has been written from scratch. The underlying codebase has been re-written using typescript. Since we are still in development phase, some features from the original tool might be missing. (Because we are yet to develop it, or simply because we haven't made up our mind yet if those features are going to be included or not.) Camouflage introduces handlebars, which allows you to generate dynamic (more real) responses. Using handlebars, you can generate random numbers, string, alphanumeric string, UUIDs and random dates. You can also extract information from request queries, path, body or headers and use them in your response. And finally you can use handlebars to carry out request matching for you. For example, return one response if a query param exists, return another if it doesn't.","title":"Camouflage Documentation"},{"location":"#camouflage-documentation","text":"Camouflage is a service virtualization tool inspired by namshi/mockserver . As the original description says, the mocking/service virtualization works on a file based structure where you simply organize your mocked HTTP responses in a bunch of mock files and it will serve them like they were coming from a real API; in this way you can write your frontends without caring too much whether your backend is really ready or not.","title":"Camouflage Documentation"},{"location":"#why-did-we-create-camouflage-if-a-similar-tool-already-exists","text":"Well, the original tool has not been maintained for some time now. But more importantly, Camouflage simply borrows the idea from the original and though it does use some of the same logic and functions, majority of the code has been written from scratch. The underlying codebase has been re-written using typescript. Since we are still in development phase, some features from the original tool might be missing. (Because we are yet to develop it, or simply because we haven't made up our mind yet if those features are going to be included or not.) Camouflage introduces handlebars, which allows you to generate dynamic (more real) responses. Using handlebars, you can generate random numbers, string, alphanumeric string, UUIDs and random dates. You can also extract information from request queries, path, body or headers and use them in your response. And finally you can use handlebars to carry out request matching for you. For example, return one response if a query param exists, return another if it doesn't.","title":"Why did we create Camouflage if a similar tool already exists?"},{"location":"folder-structure/","text":"Folder Structure The way you organize your directories inside the ${MOCKS_DIR}, determine how your endpoints will be available. Following examples will help you understand the folder structure you need to maintain. Basic GET Request to /hello-world Create a directory ${MOCKS_DIR}/hello-world Create a GET.mock file inside it with your required raw html response POST Request to /users Create a directory ${MOCKS_DIR}/users Create a POST.mock file inside it with your required raw html response GET Request to /users/:userId Create a directory ${MOCKS_DIR}/users/__ (double underscore) Create a GET.mock file inside it with your required raw html response Similarily you can create PUT.mock, DELETE.mock etc in your intended path. For wildcard, use directory name as __ (double underscore) Note Unlike original mockserver, request matching criteria, are taken care of, inside the .mock files instead of naming the files in a certain way. We intend to keep the file names simple and in the format ${HTTP_METHOD}.mock","title":"Folder Structure"},{"location":"folder-structure/#folder-structure","text":"The way you organize your directories inside the ${MOCKS_DIR}, determine how your endpoints will be available. Following examples will help you understand the folder structure you need to maintain.","title":"Folder Structure"},{"location":"folder-structure/#basic-get-request-to-hello-world","text":"Create a directory ${MOCKS_DIR}/hello-world Create a GET.mock file inside it with your required raw html response","title":"Basic GET Request to /hello-world"},{"location":"folder-structure/#post-request-to-users","text":"Create a directory ${MOCKS_DIR}/users Create a POST.mock file inside it with your required raw html response","title":"POST Request to /users"},{"location":"folder-structure/#get-request-to-usersuserid","text":"Create a directory ${MOCKS_DIR}/users/__ (double underscore) Create a GET.mock file inside it with your required raw html response Similarily you can create PUT.mock, DELETE.mock etc in your intended path. For wildcard, use directory name as __ (double underscore) Note Unlike original mockserver, request matching criteria, are taken care of, inside the .mock files instead of naming the files in a certain way. We intend to keep the file names simple and in the format ${HTTP_METHOD}.mock","title":"GET Request to /users/:userId"},{"location":"future-plans/","text":"Future plans Following items are on current todo list: Add a proxy server which could then be used to implement a recording option to create mocks. Proxy server can also be used to make calls to actual downstream application if required. Add TCP Virtualization. If you'd like to contribute, you could either pick up an item from current todos, or submit your suggestions here .","title":"Future plans"},{"location":"future-plans/#future-plans","text":"Following items are on current todo list: Add a proxy server which could then be used to implement a recording option to create mocks. Proxy server can also be used to make calls to actual downstream application if required. Add TCP Virtualization. If you'd like to contribute, you could either pick up an item from current todos, or submit your suggestions here .","title":"Future plans"},{"location":"getting-started/","text":"Getting Started Install Camouflage: npm install -g camouflage-server Run camouflage --version to validate the installation was successful. Startup Options: If you only want an HTTP server, start Camouflage using: camouflage -m ./mocks If you need an http and https server both: camouflage -m ./mocks -s -k ./certs/server.key -c ./certs/server.cert If you plan to run a performance test, we advice starting Camouflage in performance mode by providing number of CPUs parameter: camouflage -m ./mocks -n 4 (Learn more on Performance Mode page) Available command line options Notation Shorthand Description Type --mocks -m Path to directory containing mock files Required --port -p HTTP Port to listen on Optional --secure -s Start with an additional HTTPS Server Optional --secureport -x HTTPS Port to listen on Optional --key -k server.key file Required, if Camouflage is started with -s --cert -c server.cert file Required, if Camouflage is started with -s --cpus -n Number of CPUs you want Camouflage to utilize Optional Create your first mock Camouflage follows the same convention as mockserver, to create mocks. For example, You start by creating a directory ${MOCKS_DIR}/hello-world Create a file GET.mock under ${MOCKS_DIR}/hello-world. Paste following content: HTTP/1.1 200 OK X-Custom-Header: Custom-Value Content-Type: application/json { \"greeting\": \"Hey! It works\" } Navigate to http://localhost:8080/hello-world Building from source If you'd like to get the latest version of Camouflage, you can build it from the source. Note Building from source might have it's own drawbacks, most important of all is that source is always in beta. There might be some bugs which are still being worked upon. You might want to proceed with that aspect in mind. Clone the repository: git clone https://github.com/fauxauldrich/camouflage.git Install dependencies: npm install Build the project: npm build At this point you can run Camouflage using: node bin/camouflage.js -m ./mocks However if you'd like to install Camouflage globally, execute: npm pack Install by running command: npm install -g camouflage-server-${version}.tgz or npm install -g camouflage-server-${version}.zip","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Install Camouflage: npm install -g camouflage-server Run camouflage --version to validate the installation was successful. Startup Options: If you only want an HTTP server, start Camouflage using: camouflage -m ./mocks If you need an http and https server both: camouflage -m ./mocks -s -k ./certs/server.key -c ./certs/server.cert If you plan to run a performance test, we advice starting Camouflage in performance mode by providing number of CPUs parameter: camouflage -m ./mocks -n 4 (Learn more on Performance Mode page)","title":"Getting Started"},{"location":"getting-started/#available-command-line-options","text":"Notation Shorthand Description Type --mocks -m Path to directory containing mock files Required --port -p HTTP Port to listen on Optional --secure -s Start with an additional HTTPS Server Optional --secureport -x HTTPS Port to listen on Optional --key -k server.key file Required, if Camouflage is started with -s --cert -c server.cert file Required, if Camouflage is started with -s --cpus -n Number of CPUs you want Camouflage to utilize Optional","title":"Available command line options"},{"location":"getting-started/#create-your-first-mock","text":"Camouflage follows the same convention as mockserver, to create mocks. For example, You start by creating a directory ${MOCKS_DIR}/hello-world Create a file GET.mock under ${MOCKS_DIR}/hello-world. Paste following content: HTTP/1.1 200 OK X-Custom-Header: Custom-Value Content-Type: application/json { \"greeting\": \"Hey! It works\" } Navigate to http://localhost:8080/hello-world","title":"Create your first mock"},{"location":"getting-started/#building-from-source","text":"If you'd like to get the latest version of Camouflage, you can build it from the source. Note Building from source might have it's own drawbacks, most important of all is that source is always in beta. There might be some bugs which are still being worked upon. You might want to proceed with that aspect in mind. Clone the repository: git clone https://github.com/fauxauldrich/camouflage.git Install dependencies: npm install Build the project: npm build At this point you can run Camouflage using: node bin/camouflage.js -m ./mocks However if you'd like to install Camouflage globally, execute: npm pack Install by running command: npm install -g camouflage-server-${version}.tgz or npm install -g camouflage-server-${version}.zip","title":"Building from source"},{"location":"handlebars/","text":"Handlebars Handlebars help you add character to your response. Instead of sending a static response or writing some code to generate a dynamic response, you can now simply use handlebars and let Camouflage do the work for you. Custom Helpers randomValue Type: Custom Helper Usage: {{randomValue}} - Simply using randomValue will generate a 16 character alphanumeric string. ex: 9ZeBvHW5viiYuWRa . {{randomValue type='ALPHANUMERIC'}} - You can specify a type as well. Your choices are: 'ALPHANUMERIC', 'ALPHABETIC', 'NUMERIC' and 'UUID'. {{randomValue type='NUMERIC' length=10}} - Don't want a 16 character output? Use length to specify the length. {{randomValue type='ALPHABETIC' uppercase=true}} - Finally, specify uppercase as true to get a, well, uppercase string. now Type: Custom Helper Usage: {{now}} - Simply using now will give you date in format YYYY-MM-DD hh:mm:ss {{now format='MM/DD/YYYY'}} - Format not to your liking? Use any format you'd like as long as it is supported by momentjs. {{now format='epoch'}} - Time since epoch in milliseconds {{now format='unix'}} - Time since epoch in seconds {{now format='MM/DD/YYYY hh:mm:ss' offset='-10 days'}} - Use offset specify the delta for your desired date from current date. Units for specifying offset are Key Shorthand years y quarters q months M weeks w days d hours h minutes m seconds s milliseconds ms capture Type: Custom Helper Usage: {{capture from='query' key='firstName'}} - Pretty self-explanatory, but if say your endpoint looks like /hello-world?firstName=John&lastName=Wick. And your response is {\"message\": \"Hello Wick, John\"}, you can make the response dynamic by formatting your response as { \"message\": \"{{capture from='query' key='lastName'}}, {{capture from='query' key='firstName'}}\" } {{capture from='path' regex='\\/users\\/get\\/(.*)?'}} - For path you'd need to specify a regex to capture a value. {{capture from='body' using='jsonpath' selector='$.lastName'}} - To capture values from request body, your options are either using='regex' or using='jsonpath'. Selector will change accordingly. delay Type: Custom Helper Usage: {{delay lower=500 upper=600}} : You can add this value in your response header with a key Response-Delay, to simulate a latency in your API. Not providing lower/upper value or providing values where lower > upper would set delay to 0, i.e. won't have any effect. Check Response Delays page for a detailed example Inbuilt Helpers Note A variety of helpers are made available by Handlebar.js itself and Camouflage team had nothing to do with those, and we don't take credit for it. Following example just showcases how the inbuilt helpers can be used with Camouflage, more details and examples can be found just about anywhere on the internet. As far as inbuilt helpers are concerned, you can use any of them as long as it makes sense to you. Raw HTML Request: POST /users HTTP/1.1 Content-Type: application/json { \"firstName\": \"Robert\", \"lastName\": \"Downey\", \"nicknames\": [ { \"nickname\": \"Bob\" }, { \"nickname\": \"Rob\" } ] } Expected Raw HTML Response: HTTP/1.1 201 OK X-Requested-By: user-service Content-Type: application/json { \"status\": 201, \"message\": \"User created with ID: f45a3d2d-8dfb-4fc6-a0b2-c94882cd5b91\", \"data\": [ { \"nickname\": \"Bob\" }, { \"nickname\": \"Rob\" } ] } To create this service in camouflage, create a directory users under your ${MOCKS_DIR}. i.e. ${MOCKS_DIR}/users Create a file POST.mock and add following content to the file HTTP/1.1 201 OK X-Requested-By: user-service Content-Type: application/json { \"status\": 201, \"message\": \"User created with ID: {{randomValue type='UUID'}}\", \"data\": [ {{#each request.body.nicknames}} {{#if @last}} { \"nickname\": \"{{this.nickname}}\" } {{else}} { \"nickname\": \"{{this.nickname}}\" }, {{/if}} {{/each}} ] } Explanation We replaced the static UUID f45a3d2d-8dfb-4fc6-a0b2-c94882cd5b91 with {{randomValue type='UUID'}} , so that this value updates on each request. We wrapped our JSONObject inside data array with an each helper which iterates over nicknames array from request body. Finally we put an if condition to check if we are at the last element of the array, we shouldn't append a comma at the end of our JSONObject, in order to get a valid JSON. If we are at any other element in the array, we'll add a comma to JSONObject. Available inbuilt helpers are if , unless , each , with , lookup and log . More details are available at Handlebars Documentation","title":"Handlebars"},{"location":"handlebars/#handlebars","text":"Handlebars help you add character to your response. Instead of sending a static response or writing some code to generate a dynamic response, you can now simply use handlebars and let Camouflage do the work for you.","title":"Handlebars"},{"location":"handlebars/#custom-helpers","text":"","title":"Custom Helpers"},{"location":"handlebars/#randomvalue","text":"Type: Custom Helper Usage: {{randomValue}} - Simply using randomValue will generate a 16 character alphanumeric string. ex: 9ZeBvHW5viiYuWRa . {{randomValue type='ALPHANUMERIC'}} - You can specify a type as well. Your choices are: 'ALPHANUMERIC', 'ALPHABETIC', 'NUMERIC' and 'UUID'. {{randomValue type='NUMERIC' length=10}} - Don't want a 16 character output? Use length to specify the length. {{randomValue type='ALPHABETIC' uppercase=true}} - Finally, specify uppercase as true to get a, well, uppercase string.","title":"randomValue"},{"location":"handlebars/#now","text":"Type: Custom Helper Usage: {{now}} - Simply using now will give you date in format YYYY-MM-DD hh:mm:ss {{now format='MM/DD/YYYY'}} - Format not to your liking? Use any format you'd like as long as it is supported by momentjs. {{now format='epoch'}} - Time since epoch in milliseconds {{now format='unix'}} - Time since epoch in seconds {{now format='MM/DD/YYYY hh:mm:ss' offset='-10 days'}} - Use offset specify the delta for your desired date from current date. Units for specifying offset are Key Shorthand years y quarters q months M weeks w days d hours h minutes m seconds s milliseconds ms","title":"now"},{"location":"handlebars/#capture","text":"Type: Custom Helper Usage: {{capture from='query' key='firstName'}} - Pretty self-explanatory, but if say your endpoint looks like /hello-world?firstName=John&lastName=Wick. And your response is {\"message\": \"Hello Wick, John\"}, you can make the response dynamic by formatting your response as { \"message\": \"{{capture from='query' key='lastName'}}, {{capture from='query' key='firstName'}}\" } {{capture from='path' regex='\\/users\\/get\\/(.*)?'}} - For path you'd need to specify a regex to capture a value. {{capture from='body' using='jsonpath' selector='$.lastName'}} - To capture values from request body, your options are either using='regex' or using='jsonpath'. Selector will change accordingly.","title":"capture"},{"location":"handlebars/#delay","text":"Type: Custom Helper Usage: {{delay lower=500 upper=600}} : You can add this value in your response header with a key Response-Delay, to simulate a latency in your API. Not providing lower/upper value or providing values where lower > upper would set delay to 0, i.e. won't have any effect. Check Response Delays page for a detailed example","title":"delay"},{"location":"handlebars/#inbuilt-helpers","text":"Note A variety of helpers are made available by Handlebar.js itself and Camouflage team had nothing to do with those, and we don't take credit for it. Following example just showcases how the inbuilt helpers can be used with Camouflage, more details and examples can be found just about anywhere on the internet. As far as inbuilt helpers are concerned, you can use any of them as long as it makes sense to you. Raw HTML Request: POST /users HTTP/1.1 Content-Type: application/json { \"firstName\": \"Robert\", \"lastName\": \"Downey\", \"nicknames\": [ { \"nickname\": \"Bob\" }, { \"nickname\": \"Rob\" } ] } Expected Raw HTML Response: HTTP/1.1 201 OK X-Requested-By: user-service Content-Type: application/json { \"status\": 201, \"message\": \"User created with ID: f45a3d2d-8dfb-4fc6-a0b2-c94882cd5b91\", \"data\": [ { \"nickname\": \"Bob\" }, { \"nickname\": \"Rob\" } ] } To create this service in camouflage, create a directory users under your ${MOCKS_DIR}. i.e. ${MOCKS_DIR}/users Create a file POST.mock and add following content to the file HTTP/1.1 201 OK X-Requested-By: user-service Content-Type: application/json { \"status\": 201, \"message\": \"User created with ID: {{randomValue type='UUID'}}\", \"data\": [ {{#each request.body.nicknames}} {{#if @last}} { \"nickname\": \"{{this.nickname}}\" } {{else}} { \"nickname\": \"{{this.nickname}}\" }, {{/if}} {{/each}} ] } Explanation We replaced the static UUID f45a3d2d-8dfb-4fc6-a0b2-c94882cd5b91 with {{randomValue type='UUID'}} , so that this value updates on each request. We wrapped our JSONObject inside data array with an each helper which iterates over nicknames array from request body. Finally we put an if condition to check if we are at the last element of the array, we shouldn't append a comma at the end of our JSONObject, in order to get a valid JSON. If we are at any other element in the array, we'll add a comma to JSONObject. Available inbuilt helpers are if , unless , each , with , lookup and log . More details are available at Handlebars Documentation","title":"Inbuilt Helpers"},{"location":"performance-mode/","text":"Performance Mode By default Camouflage starts on a single CPU, by creating one master and one worker process. This is sufficient for a functional test and a small scale perf test (for a test with 60000 RPM without any latency simulation, 95th percentile response time was around 30 - 40 milliseconds). However, if you are on a multi core machine and you'd like Camouflage to utilize more cores, you can do so by passing and additional parameter as shown below: camouflage -m ./mocks -n 4 This will tell Camouflage to start 1 master and 4 workers utilizing 4 cores of your CPU. This leads to a better performance. For a test with 60000 RPM with latency simulation, 95th between 10 - 13 millseconds. Reports can be found on the Tests page.","title":"Performance Mode"},{"location":"performance-mode/#performance-mode","text":"By default Camouflage starts on a single CPU, by creating one master and one worker process. This is sufficient for a functional test and a small scale perf test (for a test with 60000 RPM without any latency simulation, 95th percentile response time was around 30 - 40 milliseconds). However, if you are on a multi core machine and you'd like Camouflage to utilize more cores, you can do so by passing and additional parameter as shown below: camouflage -m ./mocks -n 4 This will tell Camouflage to start 1 master and 4 workers utilizing 4 cores of your CPU. This leads to a better performance. For a test with 60000 RPM with latency simulation, 95th between 10 - 13 millseconds. Reports can be found on the Tests page.","title":"Performance Mode"},{"location":"request-matching/","text":"Request Matching There are scenarios when you would need to change your response based on some conditions met by fields on request objects. For example, if the end user passes an Authorization header, you'd want to send a 200 OK response if not you'd want to send a 401 Unauthorized resposne. To do so you can utilize the power of handlebars again. Simply provide an if else condition and you are good to go. Consider following example. You expect the user to call the endpoint /hello-world in two ways. 1) By simple making a GET request to /hello-world.; Or 2) By adding a query parameter name in the GET request to /hello-world. i.e. /hello-world?name=John Based on how the user calls the API, you'd want to send a different response. This can be done in following manner: Create GET.mock file under the directory ${MOCKS_DIR}/hello-world. And paste following content: {{#if request.query.name}} HTTP/1.1 200 OK X-Requested-By: Shubhendu Madhukar Content-Type: application/json { \"greeting\": \"Hello {{capture from='query' key='name'}}\", \"phone\": {{randomValue length=10 type='NUMERIC'}}, \"dateOfBirth\": \"{{now format='MM/DD/YYYY'}}\", \"test\": \"{{randomValue}}\" } {{else}} HTTP/1.1 200 OK X-Requested-By: Shubhendu Madhukar Content-Type: application/json { \"greeting\": \"Hello World\", \"phone\": {{randomValue length=10 type='NUMERIC'}}, \"dateOfBirth\": \"{{now format='MM/DD/YYYY'}}\", \"test\": \"{{randomValue}}\" } {{/if}} Explanation We are going to check if a query parameter with the key 'name' exists in the incoming request. We do so by adding an if condition {{#if request.query.name}} You can also check if that parameter equals a certain value {{#if request.query.name='John'}} Rest of the code is self explanatory, where if the condition is true, i.e. incoming request has a query parameter with key name , the greeting field in our response object would be Hello John , else the greeting would be Hello World . Thus if the end user makes a GET request as /hello-world?name=John , he'd get a greeting Hello John . However, if the user calls /hello-world without any name , he'd get a greeting as Hello World","title":"Request matching"},{"location":"request-matching/#request-matching","text":"There are scenarios when you would need to change your response based on some conditions met by fields on request objects. For example, if the end user passes an Authorization header, you'd want to send a 200 OK response if not you'd want to send a 401 Unauthorized resposne. To do so you can utilize the power of handlebars again. Simply provide an if else condition and you are good to go. Consider following example. You expect the user to call the endpoint /hello-world in two ways. 1) By simple making a GET request to /hello-world.; Or 2) By adding a query parameter name in the GET request to /hello-world. i.e. /hello-world?name=John Based on how the user calls the API, you'd want to send a different response. This can be done in following manner: Create GET.mock file under the directory ${MOCKS_DIR}/hello-world. And paste following content: {{#if request.query.name}} HTTP/1.1 200 OK X-Requested-By: Shubhendu Madhukar Content-Type: application/json { \"greeting\": \"Hello {{capture from='query' key='name'}}\", \"phone\": {{randomValue length=10 type='NUMERIC'}}, \"dateOfBirth\": \"{{now format='MM/DD/YYYY'}}\", \"test\": \"{{randomValue}}\" } {{else}} HTTP/1.1 200 OK X-Requested-By: Shubhendu Madhukar Content-Type: application/json { \"greeting\": \"Hello World\", \"phone\": {{randomValue length=10 type='NUMERIC'}}, \"dateOfBirth\": \"{{now format='MM/DD/YYYY'}}\", \"test\": \"{{randomValue}}\" } {{/if}}","title":"Request Matching"},{"location":"request-matching/#explanation","text":"We are going to check if a query parameter with the key 'name' exists in the incoming request. We do so by adding an if condition {{#if request.query.name}} You can also check if that parameter equals a certain value {{#if request.query.name='John'}} Rest of the code is self explanatory, where if the condition is true, i.e. incoming request has a query parameter with key name , the greeting field in our response object would be Hello John , else the greeting would be Hello World . Thus if the end user makes a GET request as /hello-world?name=John , he'd get a greeting Hello John . However, if the user calls /hello-world without any name , he'd get a greeting as Hello World","title":"Explanation"},{"location":"request-model/","text":"Request model Request object made available by camouflage is simply an instance of express request object for a given incoming request. Following are the properties/objects available on the request object which can be used in request matching or to extract information out of the request. request.baseUrl request.body request.cookies request.method request.originalUrl request.path request.protocol request.query request.headers request.body Refer to Express Documentation for more information on each of these properties.","title":"Request model"},{"location":"request-model/#request-model","text":"Request object made available by camouflage is simply an instance of express request object for a given incoming request. Following are the properties/objects available on the request object which can be used in request matching or to extract information out of the request. request.baseUrl request.body request.cookies request.method request.originalUrl request.path request.protocol request.query request.headers request.body Refer to Express Documentation for more information on each of these properties.","title":"Request model"},{"location":"response-delays/","text":"Response Delay Response delays are handled in a similar manner as it was done in mockserver, i.e. you add a Response-Delay header in raw response placed in your .mock file. For example, if you'd like to simulate a delay of 2 seconds for /hello-world endpoint, contents of your .mock file would be as follows: HTTP/1.1 200 OK X-Requested-By: Shubhendu Madhukar Content-Type: application/json Response-Delay: 2000 { \"greeting\": \"Hello World\", \"phone\": {{randomValue length=10 type='NUMERIC'}}, \"dateOfBirth\": \"{{now format='MM/DD/YYYY'}}\", \"test\": \"{{randomValue}}\" } Additionally you can also simulate a dynamic delay using the {{delay}} handlebar as follows Response-Delay: {{delay lower=500 upper=600}} This would add a random delay of a value between 500 to 600 milliseconds","title":"Response delays"},{"location":"response-delays/#response-delay","text":"Response delays are handled in a similar manner as it was done in mockserver, i.e. you add a Response-Delay header in raw response placed in your .mock file. For example, if you'd like to simulate a delay of 2 seconds for /hello-world endpoint, contents of your .mock file would be as follows: HTTP/1.1 200 OK X-Requested-By: Shubhendu Madhukar Content-Type: application/json Response-Delay: 2000 { \"greeting\": \"Hello World\", \"phone\": {{randomValue length=10 type='NUMERIC'}}, \"dateOfBirth\": \"{{now format='MM/DD/YYYY'}}\", \"test\": \"{{randomValue}}\" } Additionally you can also simulate a dynamic delay using the {{delay}} handlebar as follows Response-Delay: {{delay lower=500 upper=600}} This would add a random delay of a value between 500 to 600 milliseconds","title":"Response Delay"},{"location":"tests/","text":"Tests Functional Tests Following functional tests include the results for 7 example APIs available with Camouflage Performance Tests Single CPU This performance test was run on a single node process running without any flags on a single CPU. Test configuration: Test tool used was Locust. Locust was run in a distributed manner with 1 master and 4 workers on a 12 core machine. Please note that performance could be further improved by tuning the node js process or running Camouflage in performance mode. Performance mode: 4 CPU This performance test was on 4 node worker processes without any flage on 4 CPUs Test tool used was Locust. Locust was run in a distributed manner with 1 master and 4 workers on a 12 core machine.","title":"Tests"},{"location":"tests/#tests","text":"","title":"Tests"},{"location":"tests/#functional-tests","text":"Following functional tests include the results for 7 example APIs available with Camouflage","title":"Functional Tests"},{"location":"tests/#performance-tests","text":"","title":"Performance Tests"},{"location":"tests/#single-cpu","text":"This performance test was run on a single node process running without any flags on a single CPU. Test configuration: Test tool used was Locust. Locust was run in a distributed manner with 1 master and 4 workers on a 12 core machine. Please note that performance could be further improved by tuning the node js process or running Camouflage in performance mode.","title":"Single CPU"},{"location":"tests/#performance-mode-4-cpu","text":"This performance test was on 4 node worker processes without any flage on 4 CPUs Test tool used was Locust. Locust was run in a distributed manner with 1 master and 4 workers on a 12 core machine.","title":"Performance mode: 4 CPU"}]}
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> Camouflage <p>HTTP/gRPC Mocking tool</p> <p> Demo </p> </p>"},{"location":"#support","title":"Support","text":""},{"location":"#what-is-camouflage","title":"What is Camouflage?","text":"<p>Camouflage is a service virtualization tool inspired by namshi/mockserver. Camouflage works on a file based endpoint configuration system, which means it allows you to create a mock endpoint by simply creating a set of directories and a mock file, using which necessary responses are generated when you call the endpoint.</p>"},{"location":"#available-features","title":"Available Features","text":"<p>\ud83d\udd25 File based mocking support for HTTP, HTTPS, HTTP2, gRPC, Thrift and websockets. \ud83d\udd25</p> <p>\u26a1 Dynamic/realistic responses without having to write any code. \u26a1</p> <p>\ud83e\udde9 Flexibility to partially or fully code your responses. \ud83e\udde9</p> <p>\ud83c\udfaf Conditional responses based on request parameters. \ud83c\udfaf</p> <p>\ud83c\udf1f Inbuilt Caching - In memory and redis. \ud83c\udf1f</p> <p>\ud83e\uddee Ability to fetch and condition the response using external data. Currently supported data sources are CSV and postgres. \ud83e\uddee</p> <p>\u23f3 Delay Simulation. \u23f3</p> <p>\ud83d\udd0d Inbuilt monitoring. \ud83d\udd0d</p> <p>\ud83e\uddba Inbuilt backup and restore mechanism. \ud83e\uddba</p> <p>\u23e9 Quick start with <code>camouflage init</code> and <code>camouflage restore</code> modules. \u23e9</p> <p>\ud83c\udf8a Deployable on standalone VMs, Dockers and Kubernetes. \ud83c\udf8a</p> <p>\ud83d\udcc1 Comes with a file explorer UI that allows modification of mock files hosted remotely. \ud83d\udcc1</p> <p>\u2705 Validation of requests and responses using your OpenApi schema's. \u2705</p>"},{"location":"available-monitoring/","title":"Monitoring","text":"<p>Monitoring might not be of paramount importance when you are running unit tests or functional automation tests, but if you plan to use Camouflage for performance testing purposes, you would definitely need some monitoring in place. Thanks to <code>swagger-stats</code>, Camouflage provides you two options. You can use the inbuilt UI provided by swagger-stats by navigating to http://localhost:8080/monitoring, which will lead you to following dashboard updating itself in real time</p> <p></p> <p>Note</p> <p>If you are running more than one worker, the above UI would not provide you aggregated metrics. Data displayed will be worker specific data and at this point, we don't have a control on which worker's data will be displayed. Every time UI refreshes, the displayed data might belong to any of the running workers.</p> <p>To provide the aggregated metrics, Camouflage runs a separate monitoring server, which runs by default on port 5555. The URL <code>http://localhost:5555/metrics</code> acts as a scraping endpoint for your Prometheus server. Store this data in Prometheus and then use Grafana to generate your own visualizations. You can install a Prometheus DB and configure it to scrape from <code>/metrics</code> endpoint, and use that data to create charts for monitoring your application.</p> <p>Danger</p> <p>Disable monitoring by setting a negative value to <code>config.monitoring.port</code> in config.yaml.</p> <p>Sample Prometheus yml</p> <pre><code>global:\n  scrape_interval: 15s\n  evaluation_interval: 15s\nscrape_configs:\n  - job_name: \"camouflage\"\n    static_configs:\n      - targets: [\"localhost:5555\"]\n</code></pre> <p>Note<p>Update the target with your IP and port if running remotely or if you have specified a different port while starting Camouflage</p> </p>"},{"location":"back-up-and-restore/","title":"Backup and Restore","text":""},{"location":"back-up-and-restore/#how-does-camouflage-restore-work","title":"How does Camouflage Restore work?","text":"<ul> <li>Camouflage has an inbuilt backup and restore mechanism to keep your mocks safe.</li> <li>To enable or disable backups, update <code>backup.enable</code> property in your config file.</li> <li>To define the schedule for backup, update <code>backup.cron</code> property with a valid cron schedule (Refer Crontab.guru, if you are not familiar with cron schedules )</li> <li>In order to restore your previously backed up data, all you need is your config.yml file. Run the following command in your working directory.</li> </ul> <pre><code>camouflage restore --config config.yml\n</code></pre> <ul> <li>What to do if you don't have a config.yml? Run the <code>init</code> command first and then restore.</li> </ul> <pre><code>camouflage init\n</code></pre> <pre><code>camouflage restore --config config.yml\n</code></pre> <ul> <li>Camouflage backs up Http mocks directory, key and certificates and gRPC mocks and protos from your project.</li> </ul>"},{"location":"camouflage-ui/","title":"Camouflage UI","text":"<p>Camouflage also provides a file explorer UI allowing you to work with your mocks. Camouflage uses a standalone UI that can be downloaded as an npm package from camouflage-filemanager. It currently allows following actions:</p> <ul> <li>Create mock files/folders' structure</li> <li>View and edit mock files</li> <li>Delete mock files/folders</li> <li>Download files</li> <li>Cut or Copy files/folders</li> </ul> <p>New features will soon be added to the UI, such as:</p> <ul> <li>Uploading files</li> <li>Uploading folders as zip/tgz</li> <li>Renaming files/folders</li> <li>Integrated terminal</li> </ul> <p>Screenshots:  </p>"},{"location":"capture-helper/","title":"Capture Helper","text":"<p>This section aims to explain what data can be extracted and used to generate a response using handlebars. It can be used as reference for any available helpers, even though examples primarily focus on <code>capture</code> helper.</p> <p>Most helpers were originally built for http(s)/http2 protocols. However, as of v0.7.2 release, they can be used with all available protocols, i.e. grpc and websockets, with some obvious exceptions such as <code>file</code> and <code>code</code> helpers. (<code>code</code> helper will eventually be supported for all protocols)</p>"},{"location":"capture-helper/#using-with-httpshttp2","title":"Using with HTTP(s)/HTTP2","text":"<ol> <li>As shown in example on Handlebars page, you can use <code>capture</code> to extract information from specific parts of the incoming requests by specifying a <code>from</code> argument. Accepted values are <code>query</code>, <code>headers</code>, <code>path</code> and <code>body</code>.</li> <li>Using <code>query</code> and <code>headers</code> you can specify the argument <code>key</code>, to capture it's corresponding value.</li> <li>Using <code>path</code> you can specify the argument <code>regex</code>, to define a regular expression which captures your desired value.</li> <li>Using <code>body</code> would require you to specify two arguments, i.e. <code>using</code> and <code>selector</code>, where <code>using</code> can have values <code>jsonpath</code> or <code>regex</code>, while selector would be the respective jsonpath or regular expression.</li> </ol> <p>Please refer to the examples on the Handlebars page.</p>"},{"location":"capture-helper/#using-with-websockets","title":"Using with Websockets","text":"<p>The available/required keywords, while using <code>capture</code> helper with websockets are, <code>using</code> and <code>selector</code>. You have access to the request payload, upon which you can execute a regex or jsonpath extractor to fetch desired values.</p> <p>Example <code>{{capture using='jsonpath' selector='$.lastName'}}</code></p>"},{"location":"capture-helper/#using-with-grpc","title":"Using with gRPC","text":"<p>Similar to websockets, while using <code>capture</code> helper with gRPC, available/required arguments are <code>using</code> and <code>selector</code>.</p> <p>Example <code>{{capture using='jsonpath' selector='$.lastName'}}</code></p> <ol> <li>For unary calls and server side streams, helpers have access to request payload as is.</li> <li>For unary calls and server side streams, helpers have access to metadata as well, which can be captured by specifying <code>key</code> and <code>from</code>. Example: <code>{{capture from='metadata' key='metadata_key'}}</code></li> <li>For client side streaming calls, payloads from each stream are stored in an array, which is then made available to helpers.</li> <li>For bidi side streams, helpers can access the request payload as is during each streaming/ping-pong interaction i.e. while sending the \"data\" stream. Additionally, each payload is also stored in an array which is then made available to helpers while sending the \"end\" stream.</li> </ol>"},{"location":"configuring-cache/","title":"Configuring Cache","text":""},{"location":"configuring-cache/#in-memory-cache","title":"In Memory Cache","text":"<p>Camouflage uses apicache for caching. By default, apicache uses memory for caching, however it also provides a number of configurable options. To specify any of these optional configurations, modify <code>config.yml</code> in following way.</p> <pre><code>cache:\n  enable: false\n  ttl_seconds: 300\n  cache_options: # Optional\n    debug: false\n    defaultDuration: \"1 hour\"\n    enabled: true\n    headerBlacklist: []\n    statusCodes:\n      exclude: []\n      include: []\n    trackPerformance: false\n    headers: {}\n    respectCacheControl: false\n</code></pre> <p><code>camouflage init</code>, generates two options for cache configuration i.e. <code>enable</code> and <code>ttl_seconds</code>. These are parameters, Camouflage uses to configure a basic in memory cache. These options are not related or provided by <code>apicache</code>.</p> <p>However, you can additionally specify one or more options as shown above under <code>cache_options</code>, to control the behavior of Camouflage's cache mechanism.</p> <p>List of options made available by <code>apicache</code> are as follows:</p> <pre><code>{\n  debug:            false|true,     // if true, enables console output\n  defaultDuration:  '1 hour',       // should be either a number (in ms) or a string, defaults to 1 hour\n  enabled:          true|false,     // if false, turns off caching globally (useful on dev)\n  headerBlacklist:  [],             // list of headers that should never be cached\n  statusCodes: {\n    exclude:        [],             // list status codes to specifically exclude (e.g. [404, 403] cache all responses unless they had a 404 or 403 status)\n    include:        [],             // list status codes to require (e.g. [200] caches ONLY responses with a success/200 code)\n  },\n  trackPerformance: false,          // enable/disable performance tracking... WARNING: super cool feature, but may cause memory overhead issues\n  headers: {\n    // 'cache-control':  'no-cache' // example of header overwrite\n  },\n  respectCacheControl: false|true   // If true, 'Cache-Control: no-cache' in the request header will bypass the cache.\n}\n</code></pre>"},{"location":"configuring-cache/#redis-cache","title":"Redis Cache","text":"<p>Cache can be implemented using redis, by providing an additional <code>redis_options</code> under <code>cache_options</code></p> <pre><code>cache:\n  enable: false\n  ttl_seconds: 300\n  cache_options: # Optional\n    debug: false\n    defaultDuration: \"1 hour\"\n    enabled: true\n    headerBlacklist: []\n    statusCodes:\n      exclude: []\n      include: []\n    trackPerformance: false\n    headers: {}\n    respectCacheControl: false\n    redis_options: # Optional\n      host: 127.0.0.1\n      port: 6379\n</code></pre> <p>For a complete list of available redis options, refer to redis documentation</p> <p>Note</p> <p>Some of the options are not directly trasferred from the underlying packages. For example, <code>apicache</code> provides two more options, other than the ones mentioned above, i.e. <code>redisClient</code> and <code>appendKey</code>. Camouflage does not support <code>appendKey</code>, whereas <code>redisClient</code> is automatically configured when you provide <code>redis_options</code> as shown above.</p> <p>Similarily, <code>redis</code> package provides a <code>retry_strategy</code> option, which is not supported by Camouflage.</p> <p>This might change in future releases.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#folder-structure","title":"Folder Structure","text":"<pre><code>.\n\u2514\u2500\u2500 bin\n\u2502   \u2514\u2500\u2500 camouflage.js\n\u2514\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 BackupScheduler\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u251c\u2500\u2500 handlebar\n\u2502   \u2502   \u251c\u2500\u2500 handleBarDefinition.ts\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u251c\u2500\u2500 logger\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u251c\u2500\u2500 parser\n\u2502   \u2502   \u251c\u2500\u2500 GrpcParser.ts\n\u2502   \u2502   \u2514\u2500\u2500 HttpParser.ts\n\u2502   \u251c\u2500\u2500 protocols\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u251c\u2500\u2500 routes\n\u2502   \u2502   \u251c\u2500\u2500 CamouflageController.ts\n\u2502   \u2502   \u2514\u2500\u2500 GlobalController.ts\n\u2502   \u2514\u2500\u2500 index.ts\n\u2514\u2500\u2500 ...\n</code></pre> <p>Note</p> <p>Following section only tries to explain the tasks carried out by each module. Actual code level documentation is provided inline with each file for easier access. We also have a JSDocs available at here</p>"},{"location":"contributing/#bincamouflagejs","title":"bin/camouflage.js","text":"<p>This is the starting point of the application, which carries out following tasks:</p> <ul> <li>Takes in input from terminal/command line and config file.</li> <li>Defines actions for management modules such as <code>camouflage init</code>, <code>camouflage restore</code> and <code>camouflage -h</code>.</li> <li>Creates a cluster of master and worker processes.</li> <li>Decides if the passed arguments are valid and passes them on to the main app, else terminates the appliation with necessary error messages.</li> </ul>"},{"location":"contributing/#srcindexts","title":"src/index.ts","text":"<p>Once application passes the first stage of checks, it will reach this file, which begins the actual mock server's tasks, namely:</p> <ul> <li>Define middlewares which are, express body parser, swagger stats, winston logger for express.</li> <li>Define static resource for two UIs. First, the documentation site hosted at root (/) location and second, file explorer UI hosted at /ui location.</li> <li>Override default values of required parameters.</li> <li>Register handlebars, management controllers and global generic controllers.</li> <li>Export start function to be used by bin/camouflage.js and express app object to be used by functional tests.</li> </ul>"},{"location":"contributing/#srcbackupschedulerindexts","title":"src/BackupScheduler/index.ts","text":"<p>This module simply creates a cron job which in turn copies mocks directories, certs directory and config file to the users' home directory as a backup procedure. The backup directory then can be used to restore the files to current working directory or a new project altogether. User can disable the backup feature if required via config file and can also control how often backups should be created by specifying a cron schedule</p>"},{"location":"contributing/#srchandlebarhandlebardefinitionts","title":"src/handlebar/handleBarDefinition.ts","text":"<p>This modules define the behavior of custom handlebars made available by Camouflage, such as random value helper, now helper, request helper and num between helpers to help users to prepare a response that mimics the real world response.</p>"},{"location":"contributing/#srchandlebarindexts","title":"src/handlebar/index.ts","text":"<p>A master module for handlebar, simply to register all the helpers in one place. Alternative would be to register helpers in index.ts which is not ideal.</p>"},{"location":"contributing/#srcloggerindexts","title":"src/logger/index.ts","text":"<p>Module to define a logger according to the log level defined by config file, to be used throughout the application.</p>"},{"location":"contributing/#srcparsergrpcparserts","title":"src/parser/GrpcParser.ts","text":"<p>GrpcParser is responsible for definition of generic functions which will respond to all calls from a gRPC client be it unary, bidi or one sided streams. These functions carry out following tasks:</p> <ul> <li>Determine the location appropriate mock files based on the handler specified by the incoming requests.</li> <li>Parse the contents of the mock files</li> <li>Replace templates with their values</li> <li>Add delays</li> <li>Create chunks in case of streams</li> <li>And finally send back the response.</li> </ul>"},{"location":"contributing/#srcparserhttpparserts","title":"src/parser/HttpParser.ts","text":"<p>HttpParser is responsible for definition of generic function to be used by GlobalController module. These functions carry out following tasks:</p> <ul> <li>Determine the location appropriate mock files based on the request URL path and method.</li> <li>Parse the contents of the mock files</li> <li>Replace templates with their values</li> <li>Add delays</li> <li>Add headers</li> <li>Add status codes</li> <li>Add response body</li> <li>And finally send back the response.</li> </ul>"},{"location":"contributing/#srcprotocolsindexts","title":"src/protocols/index.ts","text":"<p>This module creates servers with their listeners for http, https, http2 and gRPC protocols as specified by enabled properties for each protocols in config file.</p>"},{"location":"contributing/#srcroutescamouflagecontrollerts","title":"src/routes/CamouflageController.ts","text":"<p>Camouflage controller is responsible for definition of endpoints useful for management modules. Available endpoints are:</p> <ul> <li>GET /mocks - Lists the available http and grpc mocks. Will be deprecated as the file explorer UI takes care of this internally, rendering this endpoint useless.</li> <li>DELETE /mocks - Deletes a mock with the specified path and method. Will be deprecated as the file explorer UI takes care of this internally, rendering this endpoint useless.</li> <li>GET /restart - Kills all the running workers which then automatically get replaced by their replacements since Camouflage follows 'restart unless explicitly stopped' policy for it's worker management. No UI component for this but will be developed soon.</li> <li>GET /ping - Shows the health and runtime of running worker</li> </ul>"},{"location":"contributing/#srcroutesglobalcontrollerts","title":"src/routes/GlobalController.ts","text":"<p>Global controller registers generic routes defined by (*) which will respond to all HTTP calls from a client unless explicitly handled by other modules from Camouflage. Uses getMatchedDir and getResponse function to locate appropriate mock file for an incoming HTTP/HTTPs/HTTP2 request and respond with the contents of the mockfile.</p>"},{"location":"default-response/","title":"Default Response","text":"<p>By default, Camouflage sends a default response for the APIs for which it cannot find a corresponding mock file.</p> <pre><code>{\n    \"error\": \"Not Found\"\n}\n</code></pre> <p>However as a user you have the ability to override it at API level or at the global level. Consider the example below.</p> <ul> <li>If you make a <code>GET</code> call to <code>/hello-world/greet/me</code>, Camouflage will first evaluate the mock file location as <code>${MOCK_DIR}/hello-world/greet/me/GET.mock</code>.</li> <li>If the above file is not found, Camouflage will look for a closest match.<ul> <li>Let's say you don't have a folder <code>${MOCK_DIR}/hello-world/greet/me</code>, but you have a folder <code>${MOCK_DIR}/hello-world/greet</code>, closest match would be evaluated to <code>${MOCK_DIR}/hello-world/greet/__/GET.mock</code></li> <li>Similarly if you don't have a folder <code>${MOCK_DIR}/hello-world/greet/me</code>, but you have a folder <code>${MOCK_DIR}/hello-world</code>, closest match would be evaluated to <code>${MOCK_DIR}/hello-world/__/GET.mock</code></li> <li>In short, the closest match is <code>${MOCK_DIR} + last available folder + wildcard + ${HTTP_VERB}.mock</code>. This is your API level default response.</li> </ul> </li> <li>If none of the files are found as shown above, Camouflage will make one final attempt to find <code>${MOCK_DIR}/__/GET.mock</code>. This is your global level default response.</li> <li>In case a global level default response too, is not found, Camouflage will fallback to it's inbuilt default response.</li> </ul> <p>To summarize, for a GET call to <code>/hello-world/greet/me</code>, Camouflage would search for corresponding mocks in following order:</p> <ul> <li><code>${MOCK_DIR}/hello-world/greet/me/GET.mock</code> - Exact Match</li> <li><code>${MOCK_DIR}/hello-world/greet/__/GET.mock</code> - API Level Default Response</li> <li><code>${MOCK_DIR}/hello-world/__/GET.mock</code> - API Level Default Response</li> <li><code>${MOCK_DIR}/__/GET.mock</code> - Global Default Response</li> </ul>"},{"location":"external-data-source/","title":"External Data Source","text":"<p>Camouflage lets you condition your response for a specific set of data. Because we understand that random values don't always fulfill the requirements. Camouflage provides two helpers, <code>pg</code> and <code>csv</code>, which can be used to connect to a postgres db and csv data file respectively.</p> <p>Danger</p> <p>Both <code>pg</code> and <code>csv</code> helpers, rely on code injection for response generation. To use these helpers, the property <code>injection</code> needs to be set to <code>true</code> in config.yml. Injection can lead to security related issues and should be used judiciously.</p>"},{"location":"external-data-source/#pg","title":"pg","text":"<p><code>pg</code> helper requires a postgres connection. To establish this connection between Camouflage and a postgres database, add following parameters in the config.yml file</p> <pre><code>ext_data_source:\n  pg:\n    host: localhost\n    port: 5432\n    user: root\n    password: password\n    database: postgres\n</code></pre> <p>Update the connection parameters with your database details.</p> <p>In your mock files, use <code>pg</code> helper to run queries and fetch corresponding data. A sample mock file would look similar to the following content:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{{#pg query='SELECT * FROM emp WHERE id = \\'1\\''}}\n(()=&gt; {\n    let response = []\n    result.rows.forEach(row =&gt; {\n        const adult = row.age &gt; 18 ? 'adult' : 'minor'\n        response.push({\n            user: row.name,\n            adult: adult\n        })\n    })\n    return {\n        status: 201,\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(response)\n    };\n})();\n{{/pg}}\n</code></pre>"},{"location":"external-data-source/#explanation","title":"Explanation","text":"<ol> <li><code>pg</code> helper, similar to <code>code</code> or <code>csv</code> helper, is written as an IIFE (Immediately Invoked Function Expression). As shown above, IIFE is written as <code>(()=&gt; { ... })();</code></li> <li>The helper requires a mandatory parameter, <code>query</code> as a string.</li> <li>The <code>pg</code> block gets access to a <code>result</code> object which can be used to condition the response. More details on how to use the <code>result</code> object can be found on node-postgres API documentation</li> <li>IIFE should return the generated response as a json object which contains body as a string. Optionally the response object can contain a status code and headers.</li> </ol>"},{"location":"external-data-source/#csv","title":"csv","text":"<p>To use <code>csv</code> helper, you would need a data source, which is a csv file. A sample file can be found in the github repo.</p> <p>Usage:</p> <p>CSV helper can be invoked in following manner, with three parameters, i.e.</p> <ul> <li>src: The location of your csv file.</li> <li>key: The column name in which you would like Camouflage to search for a specific value</li> <li>value: The value you want to search</li> </ul> <p>Camouflage then gives you access to a <code>result</code> array, which you can use inside an IIFE. It's your responsibility to decide how you want to use the <code>result</code> array. For example, in the snippet shown below, we are simply using the 1st element of the array i.e. <code>result[0]</code>. But you could also write a for loop to iterate over the array and generate your response body.</p> <p>Please note that the value you return MUST be a json object which contains a body in a string format (required), you can optionally provide status and headers as well.</p> <pre><code>HTTP/1.1 200 OK\nX-Requested-By: Shubhendu Madhukar\nContent-Type: application/json\n\n{{#csv src=\"./test.csv\" key=\"City\" value=\"Worcester\"}}\n(()=&gt; {\n    return {\n        status: 201,\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: `{\n            \"City\": \"${result[0].City}\",\n            \"State\": \"${result[0].State}\",\n            \"LatD\": ${result[0].LatD},\n            \"LonD\": ${result[0].LonD}\n        }`\n    };\n})();\n{{/csv}}\n</code></pre> <p>Camouflage provides you another alternative, in case you don't want to search for a specific value, instead you just want to pick one row at random and tailor your response to that specific row.</p> <p>In that case you'd remove <code>key</code> and <code>value</code> from the snippet shown above, and simply put <code>random=true</code> instead.</p> <p>To get entire data pass <code>all=true</code>.</p> <p>Danger</p> <ol> <li> <p>Note that, though we are calling it a \"c\"sv, it's not really comma separated, Camouflage expects the values to be separated by a semicolon. i.e. <code>;</code></p> </li> <li> <p>Keep in mind that if you use random=true, you don't get the <code>result</code> object as an array, you would get one single object. So in the example above, <code>result[0].City</code> will not work, you'd need to update it to simply <code>result.City</code></p> </li> </ol>"},{"location":"external-helper/","title":"External Helpers","text":"<p>Camouflage allows users to be able to inject custom helpers while starting the Camouflage server. To inject you'd need to update config.yml with an additional key and provide a JSON file containing the definition of your custom helper. Example:</p> <pre><code>ext_helpers: \"./custom_handlebar.json\"\n</code></pre> <p>The JSON in the file should be an array of JSON Objects containing two keys: <code>name</code> and <code>logic</code>. Example:</p> <pre><code>[\n  {\n    \"name\": \"is\",\n    \"logic\":\"(()=&gt;{ logger.info(JSON.stringify((context.hash))); if(context.hash.value1===context.hash.value2) {return context.fn(this);} else {return context.inverse(this);} })()\"\n  }\n]\n</code></pre> <ul> <li><code>name</code>, can be anything of your choosing.</li> <li><code>logic</code>, has to be an IIFE (Immediately Invoked Function Expression), inside an arrow function. The function has access to <code>request</code> and <code>logger</code> objects. The logic should return a value in accordance with your expectations from the function.</li> </ul> <p>This loads a custom helper, <code>is</code>, which can be used in your mock files to compare to values. Use it as shown in example:</p> <pre><code>HTTP/1.1 200 OK\n\n{{#is value1=request.query.name value2='Shubhendu'}}\n   Response if true\n{{else}}\n   Response if false\n{{/is}}\n</code></pre> <p>Danger</p> <p>If you plan to use any external dependencies in your code, you'd need to install them globally on the server Camouflage is hosted on, using <code>npm i -g package_name</code>. Before starting Camouflage, run  the following command:</p> <ul> <li><code>npm root -g</code></li> </ul> <p>Pass the output of this command to the next command.</p> <ul> <li>On Linux/macOS: <code>export NODE_PATH=\"output_from_previous_command\"</code></li> <li>On Windows: <code>set NODE_PATH=\"output_from_previous_command\"</code></li> </ul>"},{"location":"external-middleware/","title":"External Middlewares","text":"<p>Camouflage allows you to configure additional middlewares supported by express. This requires <code>injection</code> to be enabled in <code>config.yml</code>, as well as a <code>middleware.js</code> file at the root of your Camouflage project.</p> <p><code>middleware.js</code> is expected to include an IIFE which includes logic to configure the required middlewares. This IIFE has access to following variables:</p> <ul> <li><code>app</code></li> <li><code>logger</code></li> <li><code>allRoutes</code></li> </ul> <p>The variables can be accessed by using <code>this</code>, e.g. <code>this.app</code>, <code>this.logger</code> and <code>this.allRoutes</code>.</p>"},{"location":"external-middleware/#example","title":"Example","text":"<pre><code>(() =&gt; {\n  this.logger.info(\"inside middleware\");\n  const actuator = require(\"express-actuator\");\n  app.use(actuator());\n  this.app.use(\"/api/v1\", this.allRoutes);\n})();\n</code></pre> <p>Danger</p> <p>If you are using middleware injection, you would be responsible for configuring the mock routes, therefore it is mandatory to include the code <code>this.app.use(prefix, this.allRoutes)</code> in your IIFE, where prefix can be a string e.g. \"/\" or \"/api/v1\" or any other desired prefix to your mock routes. This would be applicable for all mocks.</p> <p>If you plan to use any external dependencies in your code, you'd need to install them globally on the server Camouflage is hosted on, using <code>npm i -g express-actuator</code>. Before starting Camouflage, run the following command:</p> <ul> <li><code>npm root -g</code></li> </ul> <p>Pass the output of this command to the next command.</p> <ul> <li>On Linux/macOS: <code>export NODE_PATH=\"output_from_previous_command\"</code></li> <li>On Windows: <code>set NODE_PATH=\"output_from_previous_command\"</code></li> </ul>"},{"location":"folder-structure/","title":"Folder Structure","text":"<p>The way you organize your directories inside the ${MOCKS_DIR}, determine how your endpoints will be available. Following examples will help you understand the folder structure you need to maintain.</p>"},{"location":"folder-structure/#basic-get-request-to-hello-world","title":"Basic GET Request to /hello-world","text":"<ul> <li>Create a directory ${MOCKS_DIR}/hello-world</li> <li>Create a GET.mock file inside it with your required raw html response</li> </ul>"},{"location":"folder-structure/#post-request-to-users","title":"POST Request to /users","text":"<ul> <li>Create a directory ${MOCKS_DIR}/users</li> <li>Create a POST.mock file inside it with your required raw html response</li> </ul>"},{"location":"folder-structure/#get-request-to-usersuserid","title":"GET Request to /users/:userId","text":"<ul> <li>Create a directory ${MOCKS_DIR}/users/__ (double underscore)</li> <li>Create a GET.mock file inside it with your required raw html response</li> </ul> <p>Similarly you can create PUT.mock, DELETE.mock etc in your intended path. For wildcard, use directory name as __ (double underscore)</p> <p>Note</p> <p>Unlike the original mockserver, request matching criteria are taken care of inside the .mock files instead of naming the files in a certain way. We intend to keep the file names simple and in the format ${HTTP_METHOD}.mock</p> <p>Danger</p> <p>Protocols http, https and http2, share the same mocks directory and folder structure, however folder structure and mocks directory for gRPC and websockets mocks are different. Please refer to the section Mocking gRPC if you are planning to create gRPC mocks.</p>"},{"location":"folder-structure/#what-data-to-put-in-mock-files","title":"What data to put in .mock files","text":"<p>Camouflage expects a raw HTTP Response to be placed in the .mock files. Please refer to this Wikipedia page, if you are not sure what the response looks like.</p> <p>Each mock file can have the HTTP Responses in following manner:</p> <ul> <li>One response per .mock file.</li> <li>Multiple responses in one .mock file with conditions defined to help Camouflage decide which response should be sent under what conditions. (Read Handlebars section for more)</li> <li>Multiple responses separated by Camouflage's delimiter i.e. \"====\" (four equals). Camouflage will pick one response at random and send it to the client. An example of this can be found here</li> </ul> <p>The data you want to put can be easily fetched using a curl command with -i -X flags in the following manner.</p> <p>Example:</p> <pre><code>curl -i -X GET https://jsonplaceholder.typicode.com/users/1 &gt; GET.mock\n</code></pre> <p>Running this command, gives you a GET.mock file with following content. Modify it according to your requirement and place it in the location ${MOCKS_DIR}/users/__, and you have successfully mocked jsonplaceholder API.</p> <pre><code>HTTP/1.1 200 OK\ndate: Sat, 17 Apr 2021 05:21:51 GMT\ncontent-type: application/json; charset=utf-8\ncontent-length: 509\nset-cookie: __cfduid=ddf6b687a745fea6ab343400b5dfe9f141618636911; expires=Mon, 17-May-21 05:21:51 GMT; path=/; domain=.typicode.com; HttpOnly; SameSite=Lax\nx-powered-by: Express\nx-ratelimit-limit: 1000\nx-ratelimit-remaining: 998\nx-ratelimit-reset: 1612952731\nvary: Origin, Accept-Encoding\naccess-control-allow-credentials: true\ncache-control: max-age=43200\npragma: no-cache\nexpires: -1\nx-content-type-options: nosniff\netag: W/\"1fd-+2Y3G3w049iSZtw5t1mzSnunngE\"\nvia: 1.1 vegur\ncf-cache-status: HIT\nage: 14578\naccept-ranges: bytes\ncf-request-id: 097fe04d2c000019d97db7d000000001\nexpect-ct: max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\"\nreport-to: {\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report?s=%2FkpNonG0wnuykR5xxlGXKBUxm5DN%2BI1PpQ0ytmiw931XaIVBNqZMJLEr0%2F3kDTrOhbX%2FCCPZtI4iuU3V%2F07wO5uwqov0d4c12%2Fcdpiz7TIFqzGkr7DwUrzt40CLH\"}],\"max_age\":604800,\"group\":\"cf-nel\"}\nnel: {\"max_age\":604800,\"report_to\":\"cf-nel\"}\nserver: cloudflare\ncf-ray: 6413365b7e9919d9-SIN\nalt-svc: h3-27=\":443\"; ma=86400, h3-28=\":443\"; ma=86400, h3-29=\":443\"; ma=86400\n\n{\n  \"id\": 1,\n  \"name\": \"Leanne Graham\",\n  \"username\": \"Bret\",\n  \"email\": \"Sincere@april.biz\",\n  \"address\": {\n    \"street\": \"Kulas Light\",\n    \"suite\": \"Apt. 556\",\n    \"city\": \"Gwenborough\",\n    \"zipcode\": \"92998-3874\",\n    \"geo\": {\n      \"lat\": \"-37.3159\",\n      \"lng\": \"81.1496\"\n    }\n  },\n  \"phone\": \"1-770-736-8031 x56442\",\n  \"website\": \"hildegard.org\",\n  \"company\": {\n    \"name\": \"Romaguera-Crona\",\n    \"catchPhrase\": \"Multi-layered client-server neural-net\",\n    \"bs\": \"harness real-time e-markets\"\n  }\n}\n</code></pre> <p>Another, easier, approach to create mocks is by installing the REST Client VS Code Extension and using it to fetch the required data for mocks.</p> <ul> <li>Launch VS Code and install \"REST Client\" Extension by Huachao Mao or simply open the link above.</li> <li>Create a .http file in your project to document your actual http endpoints and make the requests.</li> <li>Visit REST Client github repository for more details on usage</li> </ul> <p></p>"},{"location":"folder-structure/#line-breaks-in-mock-files","title":"Line Breaks in mock files","text":"<p>Note</p> <p>Camouflage by default looks for the OS specific line breaks. For example, if you are on MacOS or Unix based systems, the default line break/new line is <code>\\n</code>, whereas on windows it's <code>\\r\\n</code>. This is known to cause issues if your development environment and testing environment are different for Camouflage. For example, if you have created your mock file on a windows machine and uploaded it to a Camouflage server running on linux, your mocks might not work as expected. Or in case your text editor's line break settings do not match your OS default line break, you might not get an expected response. Starting v0.5.1, Camouflage detects new lines used in the file irrespective of the OS default. However, if you face any issues where you are getting a blank response or any unexpected response, please create an issue attaching your log files. REMEMBER TO REMOVE SENSITIVE DATA, IF ANY, FROM YOUR LOGS.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<ol> <li>Camouflage is an NPM package, therefore to install Camouflage, you'd need to install NodeJS (&gt;v14) first, if you haven't already done so.</li> <li>Install Camouflage: <code>npm install -g camouflage-server</code></li> <li>Run <code>camouflage --version</code> to validate the installation was successful.</li> <li>Create an empty directory anywhere in your machine and navigate to it in your terminal.</li> <li>For <code>npm</code> and <code>yarn</code>, execute command <code>camouflage init</code>, or use <code>npx degit camouflagejs/init myproject</code> irrespective of your pacakge manager, to initialize a Camouflage project.</li> <li>This creates a basic skeleton of the folders you'd need in order to get started. You can modify these folders as per your requirements.</li> <li>Start the Camouflage server by initializing it with a config.yml file: <code>camouflage --config config.yml</code></li> </ol>"},{"location":"getting-started/#configuration-options-sample-config-yml-file","title":"Configuration Options / Sample Config yml File","text":"<pre><code>loglevel: info\ncpus: 1\nmonitoring:\n  port: 5555\nssl:\n  cert: \"./certs/server.cert\"\n  key: \"./certs/server.key\"\n  root_cert: \"./certs/root.cert\"\nprotocols:\n  http:\n    enable: true\n    mocks_dir: \"./mocks\"\n    port: 8080\n  https:\n    enable: false\n    port: 8443\n  http2:\n    enable: false\n    port: 8081\n  ws:\n    enable: false\n    mocks_dir: \"./ws_mocks\"\n    port: 8082\n  grpc:\n    enable: false\n    host: localhost\n    port: 4312\n    mocks_dir: \"./grpc/mocks\"\n    protos_dir: \"./grpc/protos\"\n    grpc_tls: false\n  thrift:\n    enable: false\n    mocks_dir: \"./thrift/mocks\"\n    services:\n      - port: 9999\n        service: \"/opt/gen-nodejs/Calculator\"\n        handlers:\n          - add\n          - substract\n          - ping\nbackup:\n  enable: false\n  cron: \"0 * * * *\" # Hourly Backup\ncache:\n  enable: false\n  ttl_seconds: 300\ninjection:\n  enable: false\norigins:\n  - http://localhost:3000\n  - http://localhost:3001\n  - http://localhost:5000\n# ext_helpers: \"./custom_handlebar.json\"\n</code></pre>"},{"location":"getting-started/#create-your-first-mock","title":"Create your first mock","text":"<p>Camouflage follows the same convention as mockserver to create mocks. For example,</p> <ol> <li>You start by creating a directory <code>${MOCKS_DIR}/hello-world</code></li> <li>Create a file GET.mock under <code>${MOCKS_DIR}/hello-world</code></li> <li>Paste following content:</li> </ol> <pre><code>HTTP/1.1 200 OK\nX-Custom-Header: Custom-Value\nContent-Type: application/json\n\n{\n    \"greeting\": \"Hey! It works!\"\n}\n</code></pre> <p>Navigate to http://localhost:8080/hello-world</p>"},{"location":"getting-started/#building-from-source","title":"Building from source","text":"<p>Camouflage is still in its early development and has a long way to go before it reaches v1.0.0. Which means there might be some bugs, missed use cases, incorrect implementations of some functionalities. This is to be expected. But, the good news is that we are constantly evolving.</p> <p>There might be times when latest changes have not gone to release yet, such changes exist in the <code>develop</code> branch, which is the most updated version of Camouflage. If you'd like to get your hands on the upcoming release of Camouflage at any point, you can build it from the source. However, since this source might contain changes that are not tested yet and are not ready for use, you might want to proceed with caution.</p> <ol> <li>Clone the repository: <code>git clone https://github.com/testinggospels/camouflage.git</code></li> <li>Checkout <code>develop</code> branch: <code>git checkout develop</code></li> <li>Install dependencies: <code>npm install</code></li> <li>Build the project: <code>npm run build</code></li> <li>At this point you can run Camouflage using: <code>node bin/camouflage.js --config ./config.yml</code></li> <li>However if you'd like to install Camouflage globally, execute: <code>npm pack</code></li> <li>Install by running command: <code>npm install -g camouflage-server-0.0.0-development.tgz</code> or <code>npm install -g camouflage-server-0.0.0-development.zip</code></li> </ol>"},{"location":"handlebars/","title":"Handlebars","text":"<p>Handlebars help you add character to your response. Instead of sending a static response or writing some code to generate a dynamic response, you can now simply use handlebars and let Camouflage do the work for you.</p> <p>Note</p> <p>Though Camouflage does not provide any tools to help you create your mocks, there are numerous Handlerbar snippet extensions available in VS Code marketplace which should help speed up your mocks creation process.</p>"},{"location":"handlebars/#custom-helpers","title":"Custom Helpers","text":""},{"location":"handlebars/#randomvalue","title":"randomValue","text":"<p>Type: Custom Helper</p> <p>Usage:</p> <ol> <li>{{randomValue}} - Simply using randomValue will generate a 16 character alphanumeric string. ex: 9ZeBvHW5viiYuWRa.</li> <li>{{randomValue type='ALPHANUMERIC'}} - You can specify a type as well. Your choices are: 'ALPHANUMERIC', 'ALPHABETIC', 'NUMERIC' and 'UUID'.</li> <li>{{randomValue type='NUMERIC' length=10}} - Don't want a 16 character output? Use length to specify the length.</li> <li>{{randomValue type='ALPHABETIC' uppercase=true}} - Finally, specify uppercase as true to get a, well, uppercase string.</li> </ol>"},{"location":"handlebars/#now","title":"now","text":"<p>Type: Custom Helper</p> <p>Usage:</p> <ol> <li>{{now}} - Simply using now will give you date in format YYYY-MM-DD hh:mm:ss</li> <li>{{now format='MM/DD/YYYY'}} - Format not to your liking? Use any format you'd like as long as it is supported by momentjs.</li> <li>{{now format='epoch'}} - Time since epoch in milliseconds</li> <li>{{now format='unix'}} - Time since epoch in seconds</li> <li>{{now format='MM/DD/YYYY hh:mm:ss' offset='-10 days'}} - Use offset to specify the delta for your desired date from the current date.</li> </ol> <p>Units for specifying offset are</p> Key Shorthand years y quarters q months M weeks w days d hours h minutes m seconds s milliseconds ms"},{"location":"handlebars/#capture","title":"capture","text":"<p>Type: Custom Helper</p> <p>Usage:</p> <ol> <li>{{capture from='query' key='firstName'}} - Pretty self-explanatory, but if your endpoint looks like /hello-world?firstName=John&amp;lastName=Wick. And your response is {\"message\": \"Hello Wick, John\"}, you can make the response dynamic by formatting your response as</li> </ol> <pre><code>{\n    \"message\": \"Hello {{capture from='query' key='lastName'}}, {{capture from='query' key='firstName'}}\"\n}\n</code></pre> <ol> <li>{{capture from='cookies' key='mycookie'}} - For cookies, you'd need to specify a key to capture a value.</li> <li>{{capture from='path' regex='\\/users\\/get\\/(.*)?'}} - For path, you'd need to specify a regex to capture a value.</li> <li>{{capture from='body' using='jsonpath' selector='$.lastName'}} - To capture values from the request body, your options are either using='regex' or using='jsonpath'. Selector will change accordingly.</li> </ol> <p>Note</p> <p><code>capture</code> helper can be used for all the supported protocols, i.e. http/https/http2, grpc and websockets. However, it's behavior, and the data it can access, varies across protocols. Read more on Capture Helper page.</p>"},{"location":"handlebars/#num_between","title":"num_between","text":"<p>Type: Custom Helper</p> <p>Usage:</p> <ol> <li>{{num_between lower=500 upper=600}}: Generate a random number between two values.</li> <li>{{num_between lower=500 upper=600 lognormal=true}}: Generate random numbers on a bell curve centered between two values.</li> </ol> <p>Tip: you can add this value in your response header with a key <code>Response-Delay</code>, to simulate a latency in your API. Not providing lower/upper value or providing values where lower &gt; upper would set delay to 0, i.e. won't have any effect. Check Response Delays page for a detailed example</p>"},{"location":"handlebars/#array","title":"array","text":"<p>Type: Custom Helper</p> <p>Usage:</p> <ol> <li>{{array source='Apple,Banana,Mango,Kiwi' delimiter=','}}: Generate an array from a source using given delimiter.</li> </ol>"},{"location":"handlebars/#file","title":"file","text":"<p>Type: Custom Helper</p> <p>Usage:</p> <p>{{file path='/location/of/the/image/or/text/or/any/file'}}: If you want to serve a file as a response, maybe an image, or text file, a pdf document, or any type of supported files, use file helper to do so. An example is shown below:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/pdf\n\n{{file path=\"./docs/camouflage.png\"}}\n</code></pre>"},{"location":"handlebars/#code","title":"code","text":"<p>Type: Custom Helper</p> <p>Usage: Camouflage's implementation of Handlebars is robust enough to handle most dynamic responses i.e. capturing data from request, generating random numbers, as shown in examples above. However, if your requirement still cannot be fulfilled by Camouflage's helpers, you can write a custom code in javascript to achieve the same results. Refer to the example mock and explanation below:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{{#code}}\n(()=&gt;{\n    function getRandomNumberInRange(min, max) {\n        return Math.round(Math.random() * (max - min) + min);\n    }\n    const name = request.query.name;\n    const phone = getRandomNumberInRange(1000000000, 9999999999)\n    logger.info(phone);\n    return {\n        status: 201,\n        headers: {\n            'X-Requested-By': name\n        },\n        body: `{\n            \"greeting\": \"Hello ${name}\",\n            \"phone\": ${phone}\n        }`\n    };\n})();\n{{/code}}\n</code></pre> <ul> <li><code>HTTP/1.1 200 OK</code>: We start by creating a GET.mock as usual (or any ${VERB}.mock as per your requirement), where the 1st line of your file denotes protocol, version, status code and status message. This can be overridden from the code, however it is mandatory, in order to maintain a generic structure of mock files.</li> <li>Next you will provide a set of static headers, which will not change irrespective of your code logic. If you expect the header value to be dynamic, you don't need to provide them here.</li> <li>An empty line to mark the start of the body.</li> <li>Lastly, the most important part of your mock file. In place of the body, you write your code inside the code helper block provided by Camouflage. There are some restrictions though, read further.</li> <li>Code helper block can be defined by using <code>{{#code}}...{{/code}}</code>.</li> <li>The code you write has to be encapsulated in an IIFE, i.e. Immediately Invoked Function Expression, which can be done by wrapping your code in <code>(() =&gt; { //your code here })();</code></li> <li>As you might have noticed, we have defined the IIFE as an arrow function, this too is mandatory, since this provides you access to <code>request</code> and <code>logger</code> objects without having to bind <code>this</code> to the code's context. If that sounds complicated, all you need to understand is that using an arrow function provides you access to <code>request</code> and <code>logger</code> objects.</li> <li>Rest is just vanilla javascript code.<ul> <li>Define a function to generate random numbers,</li> <li>Fetch the name from a request query parameter: <code>name</code>.</li> <li>Execute the random number function and store the return value in a phone variable.</li> <li>Log the generated phone number.</li> <li>Now comes the most important part. Your IIFE should return a JSON object, containing 3 keys<ul> <li><code>status</code>: An integer value (Optional)</li> <li><code>headers</code>: A JSON object with keys as header name and values as header values. (Optional if you don't have any dynamic headers)</li> <li><code>body</code>: A string (Required.)</li> </ul> </li> <li>In this example, we have provided a static status code of 200.</li> <li>We have one header <code>X-Requested-By</code>, whose value is dynamic and changes based on the value user provided in the name query parameter while calling the mock endpoint.</li> <li>Finally, we have a stringified JSON object as body, where we are using <code>name</code> and <code>phone</code> as dynamic values.</li> </ul> </li> <li>Please note that the same response can be easily achieved by other helpers also, and you don't necessarily need to write a code. This example was just to show you how we can use the code helper. Which is to say that you should avoid writing code if you don't have to, however if you absolutely have to write a code, you have an option to do that.</li> </ul>"},{"location":"handlebars/#inject","title":"inject","text":"<p>Type: Custom Helper</p> <p>Usage: Another use case for custom code could be when you don't want to write a code for the entire response generation, but there are some parts of your response that need a custom code. Using <code>inject</code> helper you can use Camouflage's helpers and your custom code both together. Implementation remains similar to <code>code</code> helper, refer to the example below.</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"phone\": {{#inject}}(()=&gt;{ return Math.round(Math.random() * 10000000000); })();{{/inject}}\n}\n</code></pre>"},{"location":"handlebars/#csv","title":"csv","text":"<p>Type: Custom Helper</p> <p>Usage: CSV Helper allows you to provide a data source as an input along with two combinations of policies</p> <ul> <li>With a key and value: In this case the helper will return a response specific to a given key and value</li> <li>Random: In this case, helper will pick one row from the provided csv and formulate the response for the provided row</li> </ul> <p>For more details on how to use csv helper, refer to External Data Source page.</p>"},{"location":"handlebars/#is","title":"is","text":"<p>Type: Custom Helper</p> <p>Credits: danharper/Handlebars-Helpers</p> <p>Usage: <code>is</code> helper can be considered as an extension of <code>if</code> which allows you to evaluate conditions that are lacking in inbuilt helper.</p> <p><code>is</code> can be used in following three ways:</p> <ul> <li>With one argument: <code>is</code> acts exactly like <code>if</code></li> </ul> <pre><code>{{#is x}} ... {{else}} ... {{/is}}\n</code></pre> <ul> <li>With two arguments: <code>is</code> compares the two are equal (a non-strict, <code>==</code> comparison, so <code>5 == '5'</code> is true)</li> </ul> <pre><code>{{#is x y}} ... {{else}} ... {{/is}}\n</code></pre> <ul> <li>With three arguments: the second argument becomes the comparator.</li> </ul> <pre><code>{{#is x \"not\" y}} ... {{else}} ... {{/is}}\n{{#is 5 \"&gt;=\" 2}} ... {{else}} ... {{/is}}\n</code></pre> <p>Accepted operators are:</p> <ul> <li><code>==</code> (same as not providing a comparator)</li> <li><code>!=</code></li> <li><code>not</code> (alias for <code>!=</code>)</li> <li><code>===</code></li> <li><code>!==</code></li> <li><code>&gt;</code></li> <li><code>&gt;=</code></li> <li><code>&lt;</code></li> <li><code>&lt;=</code></li> <li><code>in</code> (to check if a value exists in an array. ex: <code>{{#is 'John' in (capture from='body' using='jsonpath' selector='$.names')}}</code>)</li> </ul>"},{"location":"handlebars/#proxy","title":"proxy","text":"<p>Type: Custom Helper</p> <p>Usage: Proxy Helper allows you to redirect your calls to an actual downstream selectively. You might want to redirect all calls to actual downstream or some calls based on some condition, i.e. if a specific header exists, or a query param is provided. Example mock file content:</p> <pre><code>HTTP/1.1 200 OK\nx-additional-headers: somevalue\n\n{{#proxy}}\n{\n    \"target\": \"http://target_host:3000/\"\n}\n{{/proxy}}\n</code></pre> <p>For more details on how to use the proxy helper, refer to the Proxy page.</p>"},{"location":"handlebars/#concat","title":"concat","text":"<p>Type: Custom Helper</p> <p>Usage: Concatenates multiple strings together, (static or dynamic), to form a single string.</p> <p>Example: <code>{{concat 'Camouflage ' 'is ' 'easy!!'}}</code> results in <code>Camouflage is easy</code>.</p>"},{"location":"handlebars/#assign","title":"assign","text":"<p>Type: Custom Helper</p> <p>Usage: Assign helper can be used to assign a value to a variable, by specifying a name value pair. This can be useful specially when using <code>capture</code> helper using regex and jsonpath selectors. Since running a regex or jsonpath operation is an expensive task, <code>assign</code> helper can be used to capture a value once, store it in a variable and use throughout the mock file. Aesthetically, it also improves readability of the mock file which otherwise would contain long illegible regular expressions repeated throughout the mock file.</p> <p>Example: Using a complex combination of helpers, i.e. <code>assign</code>, <code>concat</code>, <code>pg</code> and <code>capture</code>, to create a mock that would fetch a response from postgres table for a given id passed as a query parameter.</p> <pre><code>{{assign name='query' value=(concat \"SELECT * FROM emp WHERE id = '\" (capture from=\"query\" key=\"id\") \"'\") }}\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{{#pg query=query}}\n(()=&gt; {\n    let response = []\n    result.rows.forEach(row =&gt; {\n        const adult = row.age &gt; 18 ? 'adult' : 'minor'\n        response.push({\n            user: row.name,\n            adult: adult\n        })\n    })\n    return JSON.stringify(response)\n})();\n{{/pg}}\n</code></pre> <ol> <li><code>assign</code> can be simply used as <code>{{assign name='variable_name' value='variable_value'}}</code> to assign a value to a variable.</li> <li><code>concat</code> joins multiple strings together as passed. i.e. <code>{{concat 'Camouflage ' 'is ' 'easy!!'}}</code> would result in <code>Camouflage is easy</code>.</li> <li>In the example above, we capture the value of id from the query parameter <code>id</code> in request. We concatenate it with other static strings to form a query <code>SELECT * FROM emp WHERE id = '1'</code>. We assign the resulting string to a variable <code>query</code>. We pass the variable to <code>pg</code> helper as a query to be executed for results against the request, <code>http://localhost:8080/pg?id=1</code>.</li> </ol> <p>Note</p> <p>Variables created using <code>assign</code> helpers can be accessed using <code>context.data.root.VARIABLE_NAME</code> inside the helpers that support code injection (as listed below)</p> <p>Danger</p> <p>Some of the Camouflage helpers allow (sometimes require) you to write your Javascript code in order to use them. However it's not a great idea to allow such code injections due to security concerns it creates. Camouflage disables injection by default however you can enable it in config.yml. Following helpers will not work if injection is disabled.</p> <ul> <li>code;</li> <li>inject;</li> <li>pg;</li> <li>csv; and</li> <li>Any external custom handlebars you might define yourself.</li> </ul> <p>Enable injection if you understand the potential risks.</p>"},{"location":"handlebars/#state","title":"state","text":"<p>Type: Custom Helper</p> <p>Usage: State helper gets the mocked state value using a key send within the cookie header. If no value is found it will use the default context within the block.</p> <p>For example:</p> <pre><code>{\n    \"has_pending_order\": {{#state key='has-pending-order'}}false{{/state}},\n    \"cart\": {{#state key='cart'}}[\n        {\"id\": 999, \"name\": \"default prod\"}\n    ]{{/state}}\n}\n</code></pre> <p>To set a value just send cookie with a specific prefix.</p> <pre><code>const prefix = \"mocked-state\";\nconst key = \"has-pending-order\";\nsetCookie(`${prefix}-has-pending-order`, 'true');\nsetCookie(`${prefix}-cart`, '[{id: 1, name: \"prod1\"}, {id: 2, name: \"prod2\"}]');\n</code></pre> <p>Danger</p> <p>the limit of cookie values in most browsers is 4KB </p>"},{"location":"handlebars/#usage-in-cypress","title":"Usage in Cypress","text":"<p>If you use Camouglage with Cypress you could add the following custom command to make life easier.</p> <pre><code>/**\n* Custom cypress command to set a mocked state\n*/\nCypress.Commands.add('setState', (key: string, value: unknown) =&gt; {\n    cy.setCookie(`mocked-state-${key}`, typeof value === 'string' ? value : JSON.stringify(value));\n});\n</code></pre> <p>Then in your tests</p> <pre><code>cy.setState('has_pending_order', true);\ncy.setState('cart', [{id: 1, name: \"prod1\"}, {id: 2, name: \"prod2\"}]);\n</code></pre>"},{"location":"handlebars/#inbuilt-helpers","title":"Inbuilt Helpers","text":"<p>Note</p> <p>A variety of helpers are made available by Handlebar.js. Following example just showcases how the inbuilt helpers can be used with Camouflage, more details and examples can be found just about anywhere on the internet. As far as inbuilt helpers are concerned, you can use any of them as long as it makes sense to you.</p> <p>Raw HTML Request:</p> <pre><code>POST /users HTTP/1.1\nContent-Type: application/json\n\n{\n    \"firstName\": \"Robert\",\n    \"lastName\": \"Downey\",\n    \"nicknames\": [\n        {\n            \"nickname\": \"Bob\"\n        },\n        {\n            \"nickname\": \"Rob\"\n        }\n    ]\n}\n</code></pre> <p>Expected Raw HTML Response:</p> <pre><code>HTTP/1.1 201 OK\nX-Requested-By: user-service\nContent-Type: application/json\n\n{\n    \"status\": 201,\n    \"message\": \"User created with ID: f45a3d2d-8dfb-4fc6-a0b2-c94882cd5b91\",\n    \"data\": [\n        {\n            \"nickname\": \"Bob\"\n        },\n        {\n            \"nickname\": \"Rob\"\n        }\n    ]\n}\n</code></pre> <ol> <li>To create this service in camouflage, create a directory users under your ${MOCKS_DIR}. i.e. ${MOCKS_DIR}/users</li> <li>Create a file POST.mock and add following content to the file</li> </ol> <pre><code>HTTP/1.1 201 OK\nX-Requested-By: user-service\nContent-Type: application/json\n\n{\n    \"status\": 201,\n    \"message\": \"User created with ID: {{randomValue type='UUID'}}\",\n    \"data\": [\n        {{#each request.body.nicknames}}\n            {{#if @last}}\n                {\n                    \"nickname\": \"{{this.nickname}}\"\n                }\n            {{else}}\n                {\n                    \"nickname\": \"{{this.nickname}}\"\n                },\n            {{/if}}\n        {{/each}}\n    ]\n}\n</code></pre> <p>Explanation</p> <ol> <li>We replaced the static UUID <code>f45a3d2d-8dfb-4fc6-a0b2-c94882cd5b91</code> with <code>{{randomValue type='UUID'}}</code>, so that this value updates on each request.</li> <li>We wrapped our JSONObject inside a data array with an each helper which iterates over nicknames array from request body.</li> <li>Finally we put an if condition to check if we are at the last element of the array, we shouldn't append a comma at the end of our JSONObject, in order to get a valid JSON. If we are at any other element in the array, we'll add a comma to JSONObject.</li> </ol> <p>Available inbuilt helpers are <code>if</code>, <code>unless</code>, <code>each</code>, <code>with</code>, <code>lookup</code> and <code>log</code>. More details are available at Handlebars Documentation</p>"},{"location":"mocking-gRPC/","title":"Mocking gRPC","text":"<p>Camouflage introduces mocking gRPC services. Creation of mocks remains similar to HTTP mocks with some minor changes.</p> <p>For starters, gRPC mocks should not be placed in the same mocks directory as HTTP mocks, instead they should have their own mocks and protos directories. Secondly, the folder structure inside grpc mocks directory will follow the convention:</p> <pre><code>./grpc/mocks/package_name/service_name/method_name.mock\n</code></pre> <p>If your package name is in the format com.foo.bar.package, format your folder structure and mock file in following manner:</p> <pre><code>./grpc/mocks/com/foo/bar/package/service_name/method_name.mock\n</code></pre>"},{"location":"mocking-gRPC/#enabling-tls-for-grpc","title":"Enabling TLS for gRPC","text":"<p>gRPC service mock runs without TLS by default. TLS can be enabled by setting the <code>grpc_tls</code> configuration value to <code>true</code>. The server cert and key files will then be read from <code>cert</code> and <code>key</code> values in <code>ssl</code> configuration. You may also add <code>root_cert</code> path configuration value to <code>ssl</code> configuration to enable client authentication. If no <code>root_cert</code> value is defined client authentication is disabled.</p>"},{"location":"mocking-gRPC/#creating-a-grpc-mock-unary-or-client-side-streaming","title":"Creating a gRPC Mock - Unary Or Client Side Streaming","text":"<ul> <li>To create a new grpc mock, you would need the .proto file for your gRPC service. ex. <code>todo.proto</code></li> <li>Create two new directories <code>./grpc/mocks</code> and <code>./grpc/protos</code> (you can name them as you wish)</li> <li>Place your .proto file in <code>./grpc/protos</code> directory.</li> <li>Now, all we need is a .mock file. But, creating folder structure for gRPC follows a slightly different approach compared to HTTP mocks, and could be a little complicated if you are not aware of Protofile syntax.</li> <li> <p>In any case, you would need the following steps.</p> <ul> <li>Start by looking for a package name in your .proto file. Next you'd need the service name, and finally the method you need to mock.</li> <li>Create a new folder in ./grpc/mocks directory with the package name. e.g. <code>./grpc/mocks/todoPackage</code></li> <li>Create another folder in ./grpc/mocks/todoPackage directory with the service name. e.g. <code>./grpc/mocks/todoPackage/TodoService</code></li> <li>Finally create a .mock file in the directory ./grpc/mocks/todoPackage/TodoService with the method name. e.g <code>./grpc/mocks/todoPackage/TodoService/createTodo.mock</code></li> <li>Place your expected response in the mock file and you are done.</li> <li>You can use the handlebars as usual in your response, though some of handlebars were built specifically for http based protocols and might not work as expected. For example, you can not use <code>code</code> helper for gRPC. To extract some value from the gRPC request body, you can still use <code>capture</code> helper like you would extract information from http request body, but you don't need to specify <code>from='body'</code> key/value. You can always load your own handlebars to Camouflage (Check External Helpers section).</li> </ul> </li> </ul> <pre><code>{\n  \"id\": \"{{randomValue type='UUID'}}\",\n  \"text\": \"{{randomValue type='ALPHABETIC' length='100'}}\"\n}\n</code></pre> <p>Note</p> <p>If your protofile is importing any other local protofile, Camouflage registers the services/methods in the imported protofile as part of the primary protofile. In this case you'd need to specify the absolute or relative path of the imported protofile in a .protoignore file placed at the root of your Camouflage project. For example, you have a protofile A. i.e. <code>./grpc/protos/protofileA.proto</code>, which imports protofile B, i.e. <code>./grpc/protos/subdir/protofileB.proto</code>. All necessary parsing and registrations will be done as part of loading protofile A, Camouflage does not need to load protofile B separately. However, this instruction needs to be passed to Camouflage by placing the path <code>./grpc/protos/subdir/protofileB.proto</code> in a <code>.protoignore</code> placed at the root of your Camouflage project. If appropriate protoignore does not exist, Camouflage will show a warning in your logs as <code>Not re-registering some_method. Already registered.</code></p>"},{"location":"mocking-gRPC/#creating-a-grpc-mock-server-side-streaming","title":"Creating a gRPC Mock - Server Side Streaming","text":"<p>In case you are creating a service with server side streaming, you can place a separator between each chunk of responses in following manner:</p> <pre><code>{\n  \"id\": \"{{randomValue type='UUID'}}\",\n  \"text\": \"{{randomValue type='ALPHABETIC' length='100'}}\"\n}\n====\n{\n  \"id\": \"{{randomValue type='UUID'}}\",\n  \"text\": \"{{randomValue type='ALPHABETIC' length='100'}}\"\n}\n====\n{\n  \"id\": \"{{randomValue type='UUID'}}\",\n  \"text\": \"{{randomValue type='ALPHABETIC' length='100'}}\"\n}\n</code></pre> <p>Note</p> <p>The separator Camouflage understands is '====', i.e. 4 equals.</p>"},{"location":"mocking-gRPC/#creating-a-grpc-mock-bidi-streaming","title":"Creating a gRPC Mock - Bidi Streaming","text":"<p>If you are creating a bidirectional streaming mock, your mock file would contain two different types of data.</p> <ul> <li>One, what to send when the client is streaming, defined by the key \"data\".</li> <li>Two, an optional key \"end\", in case you want the server to send something when the client ends the connection. If your requirement is to simply end the stream when client ends the stream, without sending any additional data, you can simply omit the \"end\" key from your mockfile.</li> </ul> <pre><code>{\n  \"data\": {\n    \"id\": \"{{randomValue type='UUID'}}\",\n    \"text\": \"{{randomValue type='ALPHABETIC' length='100'}}\"\n  },\n  \"end\": {\n    \"id\": \"{{randomValue type='UUID'}}\",\n    \"text\": \"{{randomValue type='ALPHABETIC' length='100'}}\"\n  }\n}\n</code></pre> <p>Danger</p> <p>Since BIDI streaming is slightly more complicated to simulate, current implementation of Camouflage only supports the ping-pong model of streaming, i.e. client can send multiple requests as a stream and server will respond to each request with one response as part of a stream. Finally when the client ends the stream, the server will also end the stream. As shown in the example above, the server can also send a response just before ending the stream, but this is optional.</p>"},{"location":"mocking-gRPC/#adding-delays-in-grpc","title":"Adding delays in gRPC","text":"<p>You can also add delays in your grpc mock services, by adding a delay key with the value in your mock file.</p> <pre><code>{\n  \"id\": \"{{randomValue type='UUID'}}\",\n  \"text\": \"{{randomValue type='ALPHABETIC' length='100'}}\",\n  \"delay\": {{num_between lower=500 upper=600}}\n}\n</code></pre> <p>You don't need to modify your proto file to accommodate the additional key, since Camouflage will delete the \"delay\" key from the response before sending it to the client.</p>"},{"location":"mocking-gRPC/#sending-grpc-error-responses","title":"Sending GRPC Error responses","text":"<p>Camouflage provides an experimental support to send error responses starting v0.11.0 onwards, for unary and client side streaming calls. To send an error response, append a json error object with <code>code</code> and optional <code>message</code> to your mock content.</p> <pre><code>{\n  \"error\": {\n    \"code\": 16,\n    \"message\": \"User is unauthenticted.\"\n  }\n}\n</code></pre>"},{"location":"mocking-gRPC/#sending-grpc-response-metadata","title":"Sending GRPC response metadata","text":"<p>Camouflage provides an experimental support to send metadata/trailers with responses starting v0.11.0 onwards, for unary and client side streaming calls. To send metadata, append a json metadata object with relevant keys and values to your mock content.</p> <pre><code>{\n  \"metadata\": {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n  }\n}\n</code></pre> <p>Danger</p> <p>Since the Camouflage gRPC server needs to register the new services, everytime you add a new protofile, you'd need to restart the Camouflage server. Good news is, you can do so easily by making a get request to /restart endpoint. Though the downtime is minimal (less than a second, we do not recommend restarting the server during a performance test. Note that restart is required only if you add a new protofile. If you have added a new mock file or updated an existing one, a restart is not required.</p>"},{"location":"mocking-gRPC/#overriding-proto-loaders-default-options","title":"Overriding proto-loader's default options","text":"<p>Camouflage uses default options as specified by <code>@grpc/proto-loader</code>. You can however override the default values by creating a <code>plconfig.js</code> file at the root of your Camouflage project. The contents of the file should export a variable <code>plconfig</code> as follows:</p> <pre><code>module.exports.plconfig = {\n    keepCase: true,\n    longs: String,\n    enums: String,\n    bytes: Array\n}\n</code></pre> <p>Available options are as follows:</p> Field name Valid values Description <code>keepCase</code> <code>true</code> or <code>false</code> Preserve field names. The default is to change them to camel case. <code>longs</code> <code>String</code> or <code>Number</code> The type to use to represent <code>long</code> values. Defaults to a <code>Long</code> object type. <code>enums</code> <code>String</code> The type to use to represent <code>enum</code> values. Defaults to the numeric value. <code>bytes</code> <code>Array</code> or <code>String</code> The type to use to represent <code>bytes</code> values. Defaults to <code>Buffer</code>. <code>defaults</code> <code>true</code> or <code>false</code> Set default values on output objects. Defaults to <code>false</code>. <code>arrays</code> <code>true</code> or <code>false</code> Set empty arrays for missing array values even if <code>defaults</code> is <code>false</code> Defaults to <code>false</code>. <code>objects</code> <code>true</code> or <code>false</code> Set empty objects for missing object values even if <code>defaults</code> is <code>false</code> Defaults to <code>false</code>. <code>oneofs</code> <code>true</code> or <code>false</code> Set virtual oneof properties to the present field's name. Defaults to <code>false</code>. <code>json</code> <code>true</code> or <code>false</code> Represent <code>Infinity</code> and <code>NaN</code> as strings in <code>float</code> fields, and automatically decode <code>google.protobuf.Any</code> values. Defaults to <code>false</code> <code>includeDirs</code> An array of strings A list of search paths for imported <code>.proto</code> files. <code>includeProtos</code> An array of strings A list of proto files to be loaded. If specified, Camouflage will only load the specified proto files and ignore other protofiles in <code>config.protocols.grpc.protos_dir</code>. <p>Note</p> <p>Camouflage extends the configurations provided by Protoloader Options(@grpc/proto-loader).</p>"},{"location":"mocking-soap/","title":"Mocking SOAP","text":"<p>Camouflage supports mocking for SOAP services.</p>"},{"location":"mocking-soap/#how-to-mock-soap","title":"How to mock SOAP?","text":"<ul> <li>Start by enabling soap protocol in the config file, provide the location of your ${SOAP_MOCKS} directory and optionally update the port.</li> <li>Also configure the WSDL schema containing the services you wish to mock and the path you want it to be available on.</li> </ul> <pre><code>protocols:\n  soap:\n    enable: true\n    mocks_dir: \"./soap/mocks\"\n    port: 8100\n    services:\n      - wsdl: ./soap/countryservice.wsdl\n        path: /countryinfo\n</code></pre> <ul> <li>The folder structure for ${SOAP_MOCKS} follows the stucture of the WSDL schema, where you create a series of folders under ${SOAP_MOCKS} e.g. ${SOAP_MOCKS}/CountryInfoService/CountryInfoServiceSoap12/CountriesUsingCurrency.mock. This will allow you to POST to your mocked SOAP server using the url <code>http://localhost:8100/countryinfo</code></li> </ul> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\"&gt;\n    &lt;soap12:Body&gt;\n        &lt;CountriesUsingCurrency xmlns=\"http://www.oorsprong.org/websamples.countryinfo\"&gt;\n            &lt;sISOCurrencyCode&gt;EU&lt;/sISOCurrencyCode&gt;\n        &lt;/CountriesUsingCurrency&gt;\n    &lt;/soap12:Body&gt;\n&lt;/soap12:Envelope&gt;\n</code></pre> <ul> <li>Camouflage uses <code>CountriesUsingCurrency.mock</code> to respond to all incoming messages. The contents of this file is not XML, but rather a JSON format containting a body property, which converted to a SOAP response by the mock server.</li> <li>The mock file, as you'd expect, supports handlebars! So you can generate random numbers, put conditional blocks etc.</li> <li>The format of mock file would be as follows:</li> </ul> <pre><code>{\n    \"body\": [\n        {\n            \"sISOCode\": \"NL\", \n            \"sName\": \"The Netherlands\"\n        },\n        {\n            \"sISOCode\": \"{{randomValue type='ALPHABETIC' uppercase=true length=2}}\", \n            \"sName\": \"{{randomValue type='ALPHABETIC' uppercase=true length=10}}\"\n        },\n        {\n            \"sISOCode\": \"BE\", \n            \"sName\": \"Belgium\"\n        }\n    ]\n}\n</code></pre> <ul> <li>It's also possible to delay responses by adding a delay. For example 10 seconds:</li> </ul> <pre><code>{\n    \"delay\": 10000,\n    \"body\": \"{{randomValue type='ALPHABETIC' uppercase=true length=2}}\"\n}\n</code></pre>"},{"location":"mocking-soap/#example-request","title":"Example request","text":"<p>Request</p> <pre><code>curl -X POST \\\n  'http://localhost:8100/countryinfo' \\\n  --header 'Accept: */*' \\\n  --header 'Content-Type: application/soap+xml; charset=utf-8' \\\n  --data-raw '&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\"&gt;\n  &lt;soap12:Body&gt;\n    &lt;CountriesUsingCurrency xmlns=\"http://www.oorsprong.org/websamples.countryinfo\"&gt;\n      &lt;sISOCurrencyCode&gt;EU&lt;/sISOCurrencyCode&gt;\n    &lt;/CountriesUsingCurrency&gt;\n  &lt;/soap12:Body&gt;\n&lt;/soap12:Envelope&gt;'\n</code></pre> <p>Response</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:tns=\"http://www.oorsprong.org/websamples.countryinfo\"&gt;\n    &lt;soap:Body&gt;\n        &lt;CountriesUsingCurrencyResponse&gt;\n            &lt;sISOCode&gt;NL&lt;/sISOCode&gt;\n            &lt;sName&gt;The Netherlands&lt;/sName&gt;\n        &lt;/CountriesUsingCurrencyResponse&gt;\n        &lt;CountriesUsingCurrencyResponse&gt;\n            &lt;sISOCode&gt;TK&lt;/sISOCode&gt;\n            &lt;sName&gt;TCULNUKYLD&lt;/sName&gt;\n        &lt;/CountriesUsingCurrencyResponse&gt;\n        &lt;CountriesUsingCurrencyResponse&gt;\n            &lt;sISOCode&gt;BE&lt;/sISOCode&gt;\n            &lt;sName&gt;Belgium&lt;/sName&gt;\n        &lt;/CountriesUsingCurrencyResponse&gt;\n    &lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre>"},{"location":"mocking-thrift/","title":"Mocking Thrift","text":""},{"location":"mocking-websockets/","title":"Mocking Websockets","text":"<p>Camouflage supports mocking for websockets via native WebSockets API. Note that at this time, custom websockets implementations such as via Socket.io are not supported.</p> <p>Note</p> <p>In following instructions ${WS_MOCKS} refers to the location of websockets' mocks directory as specified under config.ws.mocks_dir in config.yml</p>"},{"location":"mocking-websockets/#how-to-mock-websockets","title":"How to mock websockets?","text":"<ul> <li>Start by enabling ws protocol in the config file, provide the location of your ${WS_MOCKS} directory and optionally update the port.</li> <li>The folder structure for ${WS_MOCKS} resembles HTTP mocks, where you create a series of folders under ${WS_MOCKS} e.g. ${WS_MOCKS}/hello/world. This will allow you to connect to the websockets server using the url <code>ws://localhost:8082/hello/world</code></li> <li>Under /hello/world, you would need to provide two mock files, <code>connection.mock</code> (optional) and <code>message.mock</code>.</li> <li>Camouflage uses <code>connection.mock</code> to send you a custom message when you first connect to the server. This is optional, not providing this file would simply log a warning message in the console.</li> <li>Camouflage uses <code>message.mock</code> to respond to all incoming messages. This too can be optional if you don't want the server to return any messages, but not providing this file would log an error message in the console.</li> <li>The mock file, as you'd expect, supports handlebars! So you can generate random numbers, put conditional blocks etc.</li> <li>The format of mock file would be as follows:</li> </ul> <pre><code>{\n  \"broadcast\": \"{{now}}\",\n  \"emit\": \"{{randomValue type='UUID'}}\",\n  \"self\": \"{{randomValue}}\",\n  \"delay\": \"{{num_between lower=500 upper=600}}\"\n}\n</code></pre> <p>The JSON can have one or more of these three keys: <code>broadcast</code>, <code>emit</code> or <code>self</code></p> <ul> <li>broadcast: Camouflage will broadcast these messages, i.e. The value which {{now}} evaluates to, in the above example, will be sent to all the connected clients, including the client emitting the message.</li> <li>emit: Camouflage will emit these messages, i.e. The value {{randomValue type='UUID'}} evaluates to in above example, will be sent to all the connected clients, except the client emitting the message.</li> <li>self: Camouflage will only send these messages to the client who made the request, i.e. The value {{randomValue}} evaluates to in above example, will be sent only to the client who made the request.</li> <li>Finally, you can also add a delay as shown in the example above.</li> </ul>"},{"location":"mocking-websockets/#client-list","title":"Client List","text":"<p>When a client is connected to or disconnected from the server, server sends a clients object as an acknowledgement, this object will contain</p> <ul> <li>The array of all the clients already in the server;</li> <li>A client id of a client either joining or leaving; and</li> <li>A status indicating if the client is joining or leaving.</li> </ul> <p>Client Object:</p> <pre><code>{\n  \"clients\": [\"af221761-d55e-4f8d-a5f3-d7418fe8be92\", \"1a8a73df-4abb-46fd-93dd-19a96e614834\"],\n  \"client\": \"1a8a73df-4abb-46fd-93dd-19a96e614834\",\n  \"status\": \"joining\"\n}\n</code></pre> <p>Note</p> <p>The client object is broadcasted, meaning all the connected clients will receive the clients object any time a client joins or leaves the server.</p>"},{"location":"openAPI-conversion/","title":"OpenAPI Conversion","text":"<p>If you have access to the OpenAPI specification for the APIs/Endpoints you want to mock, Camouflage supports the conversion via an external utility, <code>camoswag</code>.</p>"},{"location":"openAPI-conversion/#getting-started","title":"Getting started","text":"<ul> <li>To use <code>camoswag</code>, you would need your OpenAPI specification file in either .json or .yaml format.</li> <li>You don't need to install camoswag locally on your machine, you can simply run the script using npx.</li> <li>Run the command: <code>npx camoswag --spec ./swagger.yaml</code> or <code>npx camoswag --spec ./swagger.json</code>. (Replace file location with your spec file location)</li> <li>If you would like to install <code>camoswag</code> locally, you can do so by running the command: <code>npm i -g camoswag</code>. For conversion use, <code>camoswag --spec ./swagger.yaml</code></li> <li>This would create a new folder with the name <code>camouflage-${current_timestamp}</code> containing the required folder structure and mock files corresponding to each endpoint defined in your spec file.</li> <li>You can either delete or modify the dummy responses placed in the mockfiles as per your expectations. Once you are satisfied with the modifications, you can move the contents of the folder to your original ${MOCK_DIR} of your running Camouflage server.</li> <li>Note that if your spec file doesn't contain a response defined for a given endpoint, <code>camoswag</code> would put the following default response in the mock file.</li> </ul> <pre><code>{\n  \"message\": \"More Configuration Needed\"\n}\n</code></pre> <p>Danger</p> <p>camoswag currently supports JSON responses only.</p>"},{"location":"performance-mode/","title":"Performance Mode","text":"<p>By default Camouflage starts on a single CPU, by creating one master and one worker process. This is sufficient for a functional test and a small scale perf test (for a test with 60000 RPM without any latency simulation, 95th percentile response time was around 30 - 40 milliseconds). However, if you are on a multi core machine and you'd like Camouflage to utilize more cores, you can do so by updating the <code>cpus</code> parameter in your config.yml as any number less than the available CPUs. e.g. 4</p> <p>This will tell Camouflage to start 1 master and 4 workers utilizing 4 cores of your CPU. This leads to a better performance. For a HTTP test with 60000 RPM with latency simulation, 95th between 10 - 13 milliseconds. Reports can be found on the Tests page.</p> <p>Camouflage uses NodeJS cluster module to achieve this, which means it also provides a high availability. If you have specified 4 workers, Camouflage will always ensure that 4 workers are running. In any case if one or more of your workers crash, they will be replaced by a new worker.</p>"},{"location":"proxying/","title":"Proxying","text":"<p>Camouflage allows you to proxy selective calls to an external system using <code>{{#proxy}}{{/proxy}}</code> handlebar helper. Proxy support uses <code>http-proxy</code> as it's underlying library and most options are supported as is. To create a proxy endpoint, begin by creating folders and mock file for your desired downstream.</p> <p>Example: If you would like Camouflage to proxy a POST request to a downstream endpoint i.e. <code>/calls-proxied/to/this-target</code>, you would create a file in following manner.</p> <pre><code>${HTTP_MOCKS_DIR}/calls-proxied/to/this-target/POST.mock\n</code></pre> <p>Content of this mock file will use proxy block helper and specify a configuration as supported by <code>http-proxy</code>:</p> <pre><code>HTTP/1.1 200 OK\n\n{{#proxy}}\n{\n    \"target\": \"http://localhost:9008\",\n    \"ssl\": {\n        \"key\": \"valid-ssl-key.pem\"\n        \"cert\": \"valid-ssl-cert.pem\"\n    },\n    \"secure\": true\n}\n{{/proxy}}\n</code></pre> <p>For more details on the available options, refer to http-proxy's documentation</p> <p>Note</p> <p>For options requiring fs.readFileSync(\"path\"), you can simply specify the path as string as shown in ssl.key and ssl.cert example above. Camouflage takes care of reading the file from the specified path.</p>"},{"location":"request-matching/","title":"Request matching","text":""},{"location":"request-matching/#request-matching","title":"Request Matching","text":"<p>There are scenarios when you would need to change your response based on some conditions met by fields on request objects. For example, if the end user passes an Authorization header, you'd want to send a 200 OK response if not you'd want to send a 401 Unauthorized response.</p> <p>To do so you can utilize the power of handlebars again. Simply provide an if else condition and you are good to go. Consider the following example.</p> <pre><code>You expect the user to call the endpoint /hello-world in two ways.\n1) By simple making a GET request to /hello-world.; Or\n2) By adding a query parameter name in the GET request to /hello-world.\n   i.e. /hello-world?name=John\n</code></pre> <p>Based on how the user calls the API, you'd want to send a different response. This can be done in following manner:</p> <p>Create a GET.mock file under the directory ${MOCKS_DIR}/hello-world. And paste following content:</p> <pre><code>{{#if request.query.name}}\nHTTP/1.1 200 OK\nX-Requested-By: Shubhendu Madhukar\nContent-Type: application/json\n\n{\n    \"greeting\": \"Hello {{capture from='query' key='name'}}\",\n    \"phone\": {{randomValue length=10 type='NUMERIC'}},\n    \"dateOfBirth\": \"{{now format='MM/DD/YYYY'}}\",\n    \"test\": \"{{randomValue}}\"\n}\n{{else}}\nHTTP/1.1 200 OK\nX-Requested-By: Shubhendu Madhukar\nContent-Type: application/json\n\n{\n    \"greeting\": \"Hello World\",\n    \"phone\": {{randomValue length=10 type='NUMERIC'}},\n    \"dateOfBirth\": \"{{now format='MM/DD/YYYY'}}\",\n    \"test\": \"{{randomValue}}\"\n}\n{{/if}}\n</code></pre>"},{"location":"request-matching/#explanation","title":"Explanation","text":"<p>We are going to check if a query parameter with the key 'name' exists in the incoming request. We do so by adding an if condition</p> <pre><code>{{#if request.query.name}}\n</code></pre> <p>Note</p> <p><code>if</code> and <code>unless</code> helpers are provided by handlebarjs, which don't have comparison capabilities. These helpers only check if the provided value is truthy or falsy. i.e. you can not do something like this: <code>{{#if something = something}}</code>. For comparisons, you'd need to use <code>is</code> helper. See Handlebars page for example.</p> <p>Rest of the code is self explanatory, where if the condition is true, i.e. incoming request has a query parameter with key <code>name</code>, the <code>greeting</code> field in our response object would be <code>Hello John</code>, else the greeting would be <code>Hello World</code>.</p> <p>Thus if the end user makes a GET request as <code>/hello-world?name=John</code>, he'd get a greeting <code>Hello John</code>. However, if the user calls <code>/hello-world</code> without any <code>name</code>, he'd get a greeting as <code>Hello World</code></p>"},{"location":"request-matching/#request-matching-using-headers","title":"Request Matching using headers","text":"<p>To perform request matching using headers the, mocks need to follow a slightly different approach. Using <code>capture</code> helper, we need to capture a specific header value which then can be passed to other helpers like <code>is</code> or <code>if</code>.</p> <pre><code>{{#if (capture from='headers' key='Authorization') }}\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"response\": \"response if auth header is present.\"\n}\n{{else}}\nHTTP/1.1 401 Unauthorized\nContent-Type: application/json\n\n{\n    \"response\": \"response if no auth header present.\"\n}\n{{/if}}\n</code></pre> <p>If you want to validate a given header against a specific value, the mock file would be as shown below:</p> <pre><code>{{#is (capture from='headers' key='Authorization') 'Basic c2h1YmhlbmR1Om1hZGh1a2Fy' }}\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"response\": \"response if auth header is present.\"\n}\n{{else}}\nHTTP/1.1 401 Unauthorized\nContent-Type: application/json\n\n{\n    \"response\": \"response if no auth header present.\"\n}\n{{/is}}\n</code></pre> <p>The same validation, albeit messy, can be carried out using <code>code</code> helper, as shown below. This needs <code>config.injection.enable</code> to be set to <code>true</code> Code</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{{#code}}\n(()=&gt;{\n    const authHeader = request.get('Authorization');\n    if(authHeader){\n        return {\n            status: 200,\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: `{\n                \"response\": \"response if auth header is present.\"\n            }`\n        };\n    }else{\n        return {\n            status: 401,\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: `{\n                \"response\": \"response if no auth header present.\"\n            }`\n        };\n    }\n})();\n{{/code}}\n</code></pre>"},{"location":"request-model/","title":"Request model","text":"<p>Request object made available by Camouflage is simply an instance of express request object for a given incoming request. Following are the properties/objects available on the request object which can be used in request matching or to extract information out of the request.</p> <ul> <li>request.baseUrl</li> <li>request.body</li> <li>request.cookies</li> <li>request.method</li> <li>request.originalUrl</li> <li>request.path</li> <li>request.protocol</li> <li>request.query</li> <li>request.body</li> </ul> <p>Refer to Express Documentation for more information on each of these properties.</p>"},{"location":"response-delays/","title":"Response delays","text":""},{"location":"response-delays/#response-delay","title":"Response Delay","text":"<p>Response delays are handled in a similar manner as it was done in mockserver, i.e. you add a Response-Delay header in raw response placed in your .mock file.</p> <p>For example, if you'd like to simulate a delay of 2 seconds for /hello-world endpoint, contents of your .mock file would be as follows:</p> <pre><code>HTTP/1.1 200 OK\nX-Requested-By: Shubhendu Madhukar\nContent-Type: application/json\nResponse-Delay: 2000\n\n{\n    \"greeting\": \"Hello World\",\n    \"phone\": {{randomValue length=10 type='NUMERIC'}},\n    \"dateOfBirth\": \"{{now format='MM/DD/YYYY'}}\",\n    \"test\": \"{{randomValue}}\"\n}\n</code></pre> <p>Additionally you can also simulate a dynamic delay using the {{num_between}} handlebar as follows</p> <pre><code>Response-Delay: {{num_between lower=500 upper=600}}\n</code></pre> <p>This would add a random delay of a value between 500 to 600 milliseconds</p>"},{"location":"tests/","title":"Tests","text":""},{"location":"tests/#functional-tests","title":"Functional Tests","text":"<p>Following functional tests include the results for 7 example APIs available with Camouflage</p> <p></p>"},{"location":"tests/#performance-tests","title":"Performance Tests","text":""},{"location":"tests/#single-cpu","title":"Single CPU","text":"<p>This performance test was run on a single node process running without any flags on a single CPU. Test configuration:</p> <ul> <li>Test tool used was Locust.</li> <li>Locust was run in a distributed manner with 1 master and 4 workers on a 12 core machine.</li> </ul> <p>Please note that performance could be further improved by tuning the node js process or running Camouflage in performance mode.</p> <p></p>"},{"location":"tests/#performance-mode-4-cpu","title":"Performance mode: 4 CPU","text":"<p>This performance test was on 4 node worker processes without any flags on 4 CPUs</p> <ul> <li>Test tool used was Locust.</li> <li>Locust was run in a distributed manner with 1 master and 4 workers on a 12 core machine.</li> </ul> <p></p>"},{"location":"using-with-docker/","title":"Camouflage with Docker","text":"<p>Camouflage can be used with the docker image available at Docker Hub.</p> <p>Camouflage can be run with docker using the command, <code>docker container run -d --name camouflage -p 8080:8080 shubhendumadhukar/camouflage:${TAG}</code>, where <code>${TAG}</code> used in docker image refers to the version of camouflage-server npm package.</p>"},{"location":"using-with-docker/#port-mapping","title":"Port Mapping","text":"<p>You can map additional ports to access other protocols and endpoints, e.g. default ports are</p> <ul> <li>8080 - For HTTP</li> <li>8443 - For HTTPS</li> <li>8081 - For HTTP2</li> <li>8082 - For Websockets</li> <li>4312 - For gRPC</li> <li>5555 - Exposes a /metrics endpoint for prometheus monitoring</li> </ul> <p>Each of these ports can be mapped to a host port of your choice</p>"},{"location":"using-with-docker/#mounting-volumes","title":"Mounting Volumes","text":"<p>Since Camouflage provides you a UI, you can create folders, upload a mock file, delete folders in order to change the mocks behavior at runtime without having to rebuild the docker image or copy additional files to the running containers.</p> <p>You can also achieve the same effect by mounting volumes while starting Camouflage.</p> <ul> <li>Create an empty directory in your host machine.</li> <li>Run <code>camouflage init</code> in the directory to generate a starter skeleton of a Camouflage project.</li> <li>Carry out necessary modifications, like deleting example files, modifying config, adding certs, etc.</li> <li>Start Camouflage using command: <ul> <li><code>docker run -d -p 8080:8080 -p 5555:5555 -v $(pwd):/app --name camouflage shubhendumadhukar/camouflage</code> if you are on mac or linux</li> <li><code>docker run -d -p 8080:8080 -p 5555:5555 -v %cd%:/app --name camouflage shubhendumadhukar/camouflage</code> if you are on Windows</li> </ul> </li> </ul> <p>To make any changes to mocks you can modify files on your host. Or you can use Camouflage UI to make necessary changes, and these changes will be persisted on your host.</p>"},{"location":"using-with-docker/#docker-compose","title":"Docker Compose","text":"<p>The fastest way to get started using Docker would be to use the <code>docker-compose.yml</code> file available in Camouflage Github repo. Download the files <code>docker-compose.yml</code>, <code>camouflage_dashboard.json</code> and <code>prometheus.yml</code> to your local environment. Run the command <code>docker-compose up -d</code> to start following entities:</p> <ul> <li>Camouflage</li> <li>Camouflage UI</li> <li>Prometheus</li> <li>Grafana</li> </ul> <p>Once all containers are up, simply import <code>camouflage_dashboard.json</code> as a Grafana dashboard. </p> <p>Note</p> <p>Change Grafana Password (<code>Password@123</code>) on first login</p>"},{"location":"using-with-kubernetes/","title":"Camouflage with Kubernetes","text":"<p>Camouflage can be also be used with the Kubernetes using the *.yaml files available at GitHub.</p> <p>Note</p> <p>Provided *.yaml files are in no way optimally tuned to be used in production scenarios, and are expected to change in future to have a more robust structure. We welcome all suggestions for improvements. They can however be used in development environments to quickly deploy and scale Camouflage. </p>"},{"location":"using-with-kubernetes/#what-is-included","title":"What is included?","text":"<p>Kubernetes deployments include 5 yaml files:</p> <ul> <li>camouflage-depl.yaml - Defines Camouflage pod, along with an init pod to setup Camouflage. Change the desired number of replicas and allocated CPU/Memory here</li> <li>camouflage-ui-depl.yaml - Defines Camouflage UI pod. No further configuration needed.</li> <li>camouflage-pvc.yaml - Allows Camouflage to persist mocks/protofiles data even if a pod is killed, also helps share same data accross pods. Change the assigned storage volume and storage class here</li> <li>camouflage-service.yaml - Defines a loadbalancer service to access mocks. Change port mappings here.</li> <li>camouflage-ui-service.yaml - Defines a loadbalancer service to access UI. Change port mappings here.</li> </ul>"},{"location":"using-with-kubernetes/#how-it-works","title":"How it works?","text":"<ul> <li>To deploy and scale, download all five files and store locally or on your dedicated server.</li> <li>Navigate to the directory containing the five files and run the command: <code>kubectl apply -f .</code></li> <li>This starts n number of pods as specified in replica, alongwith init pods.</li> <li>This sets up Loadbalancer Service.</li> <li>Finally this sets up a PVC, which is to be populated by the init pods. If the mounted volume is empty, init pods will run <code>camouflage init</code>, so that you don't have to. Any changes/deletion/creation of mocks will be persisted, further init pods created during scaling/deleting/restarting will not change the existing data.</li> </ul>"},{"location":"using-with-kubernetes/#port-mapping","title":"Port Mapping","text":"<p>You can map ports in <code>camouflage-service.yaml</code> to access available protocols and endpoints. Default ports/mappings are:</p> <ul> <li>8080 - For HTTP</li> <li>8443 - For HTTPS</li> <li>8081 - For HTTP2</li> <li>8082 - For Websockets</li> <li>4312 - For gRPC</li> <li>5555 - Exposes a /metrics endpoint for prometheus monitoring</li> </ul> <p>Default UI port is 3001, which can be changed in <code>camouflage-ui-service.yaml</code></p> <p>Each of these ports can be mapped to a host port of your choice</p>"},{"location":"using-with-kubernetes/#using-camouflage-on-k8s","title":"Using Camouflage on K8s","text":"<p>All mocks and endpoints can be access via the loadbalancer service. As well as any changes to mocks, can be made using Camouflage UI available via the additional UI loadbalancer service.</p>"},{"location":"validation/","title":"Validation","text":"<p>When testing software using a mock server it's important that your mocks are correct/valid to avoid false assumptions.</p> <p>Contract testing is a grest methodology for ensuring that two separate systems are compatible and can communicate with one other.\u200b</p> <p>What sets this form of testing apart from other approaches that aim to achieve the same thing, is that each system can be tested independently from the other and that the contract is generated by the code itself, meaning the contract is always kept up to date with reality.\u200b</p> <p></p>"},{"location":"validation/#openapi-schema-validation","title":"OpenApi schema validation","text":"<p>Camouflage server support OpenApi schema's for request and response validation. When enabled the configured schema's are loaded in memory and each request and response simply need to adhere to the rules in schema.</p>"},{"location":"validation/#configuration-options","title":"Configuration Options","text":"<p>By default, validation is disabled. To specify any of these optional configurations, modify config.yml in following way.</p> <pre><code>validation:\n  enable: true\n  schemas:\n    - type: OpenApi\n      url: https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples/v3.0/petstore.json\n</code></pre>"},{"location":"validation/#example","title":"Example","text":"<p>Now when you have a mock for the supported endpoint <code>/pets</code> requesting it would result in a proper response.</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  { \"id\": 1, \"name\": \"Rabbit\" },\n  { \"id\": 2, \"name\": \"Dog\" },\n  { \"id\": 3, \"name\": \"Cat\" },\n  { \"id\": 4, \"name\": \"Bird\" }\n]\n</code></pre>"},{"location":"validation/#request-validation","title":"Request validation","text":"<p>Given this schema for <code>/pets</code> we see that the only support parameter is the integer <code>limit</code></p> <pre><code>{\n  \"openapi\": \"3.0.0\",\n  \"paths\": {\n    \"/pets\": {\n      \"get\": {\n        \"summary\": \"List all pets\",\n        \"operationId\": \"listPets\",\n        \"parameters\": [\n          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"description\": \"How many items to return at one time (max 100)\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            }\n          }\n        ]\n        ...\n    }\n  }\n}\n</code></pre> <p>Called with an unsupported paraemeter like <code>/pets?unsupported=1</code> will result in the following 400 error.</p> <pre><code>[\n  {\n    \"path\": \"page\",\n    \"errorCode\": \"type.openapi.requestValidation\",\n    \"message\": \"unknown query parameter 'unsupported'\",\n    \"location\": \"query\"\n  }\n]\n</code></pre> <p>Called with a wrong type like <code>/pets?limit=abc</code> will also result in the following 400 error.</p> <pre><code>[\n  {\n    \"path\": \"limit\",\n    \"errorCode\": \"type.openapi.requestValidation\",\n    \"message\": \"must be integer\",\n    \"location\": \"query\"\n  }\n]\n</code></pre>"},{"location":"validation/#response-validation","title":"Response validation","text":"<p>Given this schema for <code>/pets</code> we see that a pet has two required properties <code>id</code> and <code>name</code>.</p> <pre><code>{\n  \"openapi\": \"3.0.0\",\n  \"paths\": {\n    \"/pets\": {\n      \"get\": {\n        \"summary\": \"List all pets\",\n        \"operationId\": \"listPets\",\n        ...\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A paged array of pets\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Pets\"\n                }\n              }\n            }\n          },\n        ...\n    }\n  }\n\"components\": {\n    \"schemas\": {\n      \"Pet\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"id\",\n          \"name\"\n        ],\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"tag\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"Pets\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/Pet\"\n        }\n      },\n    ...\n    }\n  }\n}\n</code></pre> <p>In case previously your backend api did only had a required property <code>id</code> your assumptions in the tests are false.</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  { \"id\": 1, \"name\": \"Rabbit\" },\n  { \"id\": 2, \"name\": \"Dog\" },\n  { \"id\": 3, \"name\": \"Cat\" },\n  { \"id\": 4 }\n]\n</code></pre> <p>Responses with the following mock will be blocked with a 409 response helping you to avoid mistakes.</p> <pre><code>[\n  {\n    \"path\": \"3\",\n    \"errorCode\": \"required.openapi.responseValidation\",\n    \"message\": \"must have required property 'name'\"\n  }\n]\n</code></pre>"}]}